<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta http-equiv="Content-Style-Type" content="text/css">
  <title></title>
  <meta name="Generator" content="Cocoa HTML Writer">
  <meta name="CocoaVersion" content="2575.6">
  <style type="text/css">
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    li.li1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    ul.ul1 {list-style-type: '—  '}
  </style>
</head>
<body>
<p class="p1">&lt;!DOCTYPE html&gt;</p>
<p class="p1">&lt;html lang="en"&gt;</p>
<p class="p1">&lt;head&gt;</p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;meta charset="UTF-8"&gt;</p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;title data-key="appTitle"&gt;Music Video Generator&lt;/title&gt;</p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;!-- Tailwind CSS CDN for styling --&gt;</p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;script src="https://cdn.tailwindcss.com"&gt;&lt;/script&gt;</p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;!-- JSZip CDN for creating zip files --&gt;</p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"&gt;&lt;/script&gt;</p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;style&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>/* CSS Variables for Theming */</p>
<p class="p1"><span class="Apple-converted-space">        </span>:root {</p>
<p class="p1"><span class="Apple-converted-space">            </span>/* Light Theme Defaults */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--bg-color-body: #f0f2f5;</p>
<p class="p1"><span class="Apple-converted-space">            </span>--bg-color-app: rgba(255, 255, 255, 0.95);</p>
<p class="p1"><span class="Apple-converted-space">            </span>--text-color-primary: #1a202c; /* gray-900 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--text-color-secondary: #4a5568; /* gray-700 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--text-color-muted: #718096; /* gray-500 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--border-color-light: #e2e8f0; /* gray-200 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--border-color-medium: #cbd5e0; /* gray-300 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--shadow-color-light: rgba(0, 0, 0, 0.05);</p>
<p class="p1"><span class="Apple-converted-space">            </span>--shadow-color-medium: rgba(0, 0, 0, 0.15);</p>
<p class="p1"><span class="Apple-converted-space">            </span>--input-bg-color: #ffffff;</p>
<p class="p1"><span class="Apple-converted-space">            </span>--input-border-color: #cbd5e0;</p>
<p class="p1"><span class="Apple-converted-space">            </span>--input-focus-border-color: #4c83fc; /* blue-500 equivalent */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--input-focus-shadow: rgba(76, 131, 252, 0.3);</p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-default-bg: #4c83fc; /* blue-500 equivalent */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-default-hover-bg: #2e6ffc;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-purple-bg: #8b5cf6; /* purple-500 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-purple-hover-bg: #7c3aed;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-indigo-bg: #6366f1; /* indigo-500 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-indigo-hover-bg: #4f46e5;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-green-bg: #22c55e; /* green-500 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-green-hover-bg: #16a34a;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-red-bg: #ef4444; /* red-500 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-red-hover-bg: #dc2626;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-teal-bg: #14b8a6; /* teal-500 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-teal-hover-bg: #0d9488;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-disabled-bg: #93c5fd; /* blue-300 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--tab-color-inactive: #64748b; /* slate-500 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--tab-bg-hover: #eff6ff; /* blue-50 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--tab-color-active: #4c83fc; /* blue-500 equivalent */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--tab-border-active: #4c83fc; /* blue-500 equivalent */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--upload-bg-color: #f0f8ff; /* blue-50 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--upload-border-color: #9bc5f9; /* blue-300 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--upload-hover-bg: #e6f2ff; /* lighter blue */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--gallery-item-bg: #ffffff;</p>
<p class="p1"><span class="Apple-converted-space">            </span>--gallery-item-border: #cfdceb;</p>
<p class="p1"><span class="Apple-converted-space">            </span>--gallery-item-shadow: rgba(0, 0, 0, 0.1);</p>
<p class="p1"><span class="Apple-converted-space">            </span>--gallery-button-bg: #60a5fa; /* blue-400 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--gallery-button-hover-bg: #3b82f6; /* blue-500 */</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/* Dark Theme */</p>
<p class="p1"><span class="Apple-converted-space">        </span>body[data-theme='dark'] {</p>
<p class="p1"><span class="Apple-converted-space">            </span>--bg-color-body: #1a202c; /* Darker gray */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--bg-color-app: rgba(45, 55, 72, 0.95); /* Dark slate gray */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--text-color-primary: #f7fafc; /* Lighter white */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--text-color-secondary: #e2e8f0; /* Lighter gray */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--text-color-muted: #a0aec0; /* Darker muted gray */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--border-color-light: #2d3748; /* Dark border */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--border-color-medium: #4a5568; /* Medium dark border */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--shadow-color-light: rgba(0, 0, 0, 0.3);</p>
<p class="p1"><span class="Apple-converted-space">            </span>--shadow-color-medium: rgba(0, 0, 0, 0.5);</p>
<p class="p1"><span class="Apple-converted-space">            </span>--input-bg-color: #2d3748;</p>
<p class="p1"><span class="Apple-converted-space">            </span>--input-border-color: #4a5568;</p>
<p class="p1"><span class="Apple-converted-space">            </span>--input-focus-border-color: #63b3ed; /* light blue */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--input-focus-shadow: rgba(99, 179, 237, 0.4);</p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-default-bg: #4299e1; /* blue-400 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-default-hover-bg: #3182ce;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-purple-bg: #9f7aea; /* purple-400 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-purple-hover-bg: #805ad5;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-indigo-bg: #7f9cf6; /* indigo-400 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-indigo-hover-bg: #667eea;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-green-bg: #48bb78; /* green-400 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-green-hover-bg: #38a169;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-red-bg: #fc8181; /* red-400 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-red-hover-bg: #e53e3e;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-teal-bg: #4fd1c5; /* teal-400 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-teal-hover-bg: #38b2ac;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>--button-disabled-bg: #4a5568; /* gray-700 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--tab-color-inactive: #a0aec0; /* gray-500 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--tab-bg-hover: #2d3748; /* gray-800 */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--tab-color-active: #63b3ed; /* light blue */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--tab-border-active: #63b3ed; /* light blue */</p>
<p class="p1"><span class="Apple-converted-space">            </span>--upload-bg-color: #2d3748;</p>
<p class="p1"><span class="Apple-converted-space">            </span>--upload-border-color: #4a5568;</p>
<p class="p1"><span class="Apple-converted-space">            </span>--upload-hover-bg: #4a5568;</p>
<p class="p1"><span class="Apple-converted-space">            </span>--gallery-item-bg: #2d3748;</p>
<p class="p1"><span class="Apple-converted-space">            </span>--gallery-item-border: #4a5568;</p>
<p class="p1"><span class="Apple-converted-space">            </span>--gallery-item-shadow: rgba(0, 0, 0, 0.3);</p>
<p class="p1"><span class="Apple-converted-space">            </span>--gallery-button-bg: #63b3ed;</p>
<p class="p1"><span class="Apple-converted-space">            </span>--gallery-button-hover-bg: #4299e1;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/* Base styles using CSS variables */</p>
<p class="p1"><span class="Apple-converted-space">        </span>body {</p>
<p class="p1"><span class="Apple-converted-space">            </span>font-family: "Inter", sans-serif;</p>
<p class="p1"><span class="Apple-converted-space">            </span>background-color: var(--bg-color-body);</p>
<p class="p1"><span class="Apple-converted-space">            </span>display: flex;</p>
<p class="p1"><span class="Apple-converted-space">            </span>justify-content: center;</p>
<p class="p1"><span class="Apple-converted-space">            </span>align-items: center;</p>
<p class="p1"><span class="Apple-converted-space">            </span>min-height: 100vh;</p>
<p class="p1"><span class="Apple-converted-space">            </span>margin: 0;</p>
<p class="p1"><span class="Apple-converted-space">            </span>padding: 20px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>background-image: url('https://placehold.co/1920x1080/cfe2f3/ffffff?text=Abstract+Background');</p>
<p class="p1"><span class="Apple-converted-space">            </span>background-size: cover;</p>
<p class="p1"><span class="Apple-converted-space">            </span>background-position: center;</p>
<p class="p1"><span class="Apple-converted-space">            </span>background-attachment: fixed;</p>
<p class="p1"><span class="Apple-converted-space">            </span>background-blend-mode: multiply;</p>
<p class="p1"><span class="Apple-converted-space">            </span>color: var(--text-color-primary); /* Base text color */</p>
<p class="p1"><span class="Apple-converted-space">            </span>transition: background-color 0.3s ease, color 0.3s ease; /* Smooth theme transitions */</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>#app-container {</p>
<p class="p1"><span class="Apple-converted-space">            </span>background-color: var(--bg-color-app);</p>
<p class="p1"><span class="Apple-converted-space">            </span>border-radius: 16px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>box-shadow: 0 10px 30px var(--shadow-color-medium);</p>
<p class="p1"><span class="Apple-converted-space">            </span>padding: 28px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>width: 100%;</p>
<p class="p1"><span class="Apple-converted-space">            </span>max-width: 850px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>display: flex;</p>
<p class="p1"><span class="Apple-converted-space">            </span>flex-direction: column;</p>
<p class="p1"><span class="Apple-converted-space">            </span>gap: 24px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>align-items: center;</p>
<p class="p1"><span class="Apple-converted-space">            </span>backdrop-filter: blur(5px);</p>
<p class="p1"><span class="Apple-converted-space">            </span>-webkit-backdrop-filter: blur(5px);</p>
<p class="p1"><span class="Apple-converted-space">            </span>transition: background-color 0.3s ease, box-shadow 0.3s ease, backdrop-filter 0.3s ease;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>.input-group label {</p>
<p class="p1"><span class="Apple-converted-space">            </span>color: var(--text-color-secondary);</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>input[type="text"], input[type="number"], select, textarea {</p>
<p class="p1"><span class="Apple-converted-space">            </span>border: 1px solid var(--input-border-color);</p>
<p class="p1"><span class="Apple-converted-space">            </span>background-color: var(--input-bg-color);</p>
<p class="p1"><span class="Apple-converted-space">            </span>color: var(--text-color-primary);</p>
<p class="p1"><span class="Apple-converted-space">            </span>box-shadow: inset 0 1px 3px var(--shadow-color-light);</p>
<p class="p1"><span class="Apple-converted-space">            </span>transition: all 0.3s ease-in-out;</p>
<p class="p1"><span class="Apple-converted-space">            </span>padding: 12px 18px; /* Added here for consistency */</p>
<p class="p1"><span class="Apple-converted-space">            </span>border-radius: 10px; /* Added here for consistency */</p>
<p class="p1"><span class="Apple-converted-space">            </span>font-size: 1rem; /* Added here for consistency */</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>input[type="text"]:focus, input[type="number"]:focus, select:focus, textarea:focus {</p>
<p class="p1"><span class="Apple-converted-space">            </span>outline: none; /* Removed default outline */</p>
<p class="p1"><span class="Apple-converted-space">            </span>border-color: var(--input-focus-border-color);</p>
<p class="p1"><span class="Apple-converted-space">            </span>box-shadow: 0 0 0 4px var(--input-focus-shadow);</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>button {</p>
<p class="p1"><span class="Apple-converted-space">            </span>cursor: pointer;</p>
<p class="p1"><span class="Apple-converted-space">            </span>color: white; /* Always white text for buttons */</p>
<p class="p1"><span class="Apple-converted-space">            </span>border: none;</p>
<p class="p1"><span class="Apple-converted-space">            </span>font-weight: 600;</p>
<p class="p1"><span class="Apple-converted-space">            </span>padding: 12px 18px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>border-radius: 10px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>font-size: 1rem;</p>
<p class="p1"><span class="Apple-converted-space">            </span>transition: all 0.3s ease-in-out;</p>
<p class="p1"><span class="Apple-converted-space">            </span>box-shadow: 0 2px 5px var(--shadow-color-light);</p>
<p class="p1"><span class="Apple-converted-space">            </span>position: relative;</p>
<p class="p1"><span class="Apple-converted-space">            </span>overflow: hidden;</p>
<p class="p1"><span class="Apple-converted-space">            </span>background-color: var(--button-default-bg); /* Default button color */</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>button:hover:not(:disabled) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>background-color: var(--button-default-hover-bg);</p>
<p class="p1"><span class="Apple-converted-space">            </span>box-shadow: 0 4px 10px var(--shadow-color-medium);</p>
<p class="p1"><span class="Apple-converted-space">            </span>transform: translateY(-1px);</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>button:active:not(:disabled) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>transform: translateY(0);</p>
<p class="p1"><span class="Apple-converted-space">            </span>box-shadow: 0 1px 3px var(--shadow-color-light);</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>button:disabled {</p>
<p class="p1"><span class="Apple-converted-space">            </span>background-color: var(--button-disabled-bg);</p>
<p class="p1"><span class="Apple-converted-space">            </span>cursor: not-allowed;</p>
<p class="p1"><span class="Apple-converted-space">            </span>box-shadow: none;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/* Override specific button colors */</p>
<p class="p1"><span class="Apple-converted-space">        </span>#generate-storyboard-button { background-color: var(--button-indigo-bg); }</p>
<p class="p1"><span class="Apple-converted-space">        </span>#generate-storyboard-button:hover:not(:disabled) { background-color: var(--button-indigo-hover-bg); }</p>
<p class="p1"><span class="Apple-converted-space">        </span>#enhance-prompt-button { background-color: var(--button-purple-bg); }</p>
<p class="p1"><span class="Apple-converted-space">        </span>#enhance-prompt-button:hover:not(:disabled) { background-color: var(--button-purple-hover-bg); }</p>
<p class="p1"><span class="Apple-converted-space">        </span>#generate-button { background-color: var(--button-default-bg); } /* Using default for generate button */</p>
<p class="p1"><span class="Apple-converted-space">        </span>#generate-button:hover:not(:disabled) { background-color: var(--button-default-hover-bg); }</p>
<p class="p1"><span class="Apple-converted-space">        </span>#play-button { background-color: var(--button-green-bg); }</p>
<p class="p1"><span class="Apple-converted-space">        </span>#play-button:hover:not(:disabled) { background-color: var(--button-green-hover-bg); }</p>
<p class="p1"><span class="Apple-converted-space">        </span>#stop-button { background-color: var(--button-red-bg); }</p>
<p class="p1"><span class="Apple-converted-space">        </span>#stop-button:hover:not(:disabled) { background-color: var(--button-red-hover-bg); }</p>
<p class="p1"><span class="Apple-converted-space">        </span>#download-images-button { background-color: var(--button-indigo-bg); }</p>
<p class="p1"><span class="Apple-converted-space">        </span>#download-images-button:hover:not(:disabled) { background-color: var(--button-indigo-hover-bg); }</p>
<p class="p1"><span class="Apple-converted-space">        </span>#download-zip-button { background-color: var(--button-teal-bg); }</p>
<p class="p1"><span class="Apple-converted-space">        </span>#download-zip-button:hover:not(:disabled) { background-color: var(--button-teal-hover-bg); }</p>
<p class="p2"><br></p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>#image-display-container {</p>
<p class="p1"><span class="Apple-converted-space">            </span>width: 100%;</p>
<p class="p1"><span class="Apple-converted-space">            </span>min-height: 300px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>background-color: var(--border-color-light); /* Using a lighter border color for this area */</p>
<p class="p1"><span class="Apple-converted-space">            </span>border-radius: 12px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>box-shadow: inset 0 2px 5px var(--shadow-color-light);</p>
<p class="p1"><span class="Apple-converted-space">            </span>display: flex;</p>
<p class="p1"><span class="Apple-converted-space">            </span>justify-content: center;</p>
<p class="p1"><span class="Apple-converted-space">            </span>align-items: center;</p>
<p class="p1"><span class="Apple-converted-space">            </span>overflow: hidden;</p>
<p class="p1"><span class="Apple-converted-space">            </span>position: relative;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>#image-display {</p>
<p class="p1"><span class="Apple-converted-space">            </span>width: 100%;</p>
<p class="p1"><span class="Apple-converted-space">            </span>height: 100%;</p>
<p class="p1"><span class="Apple-converted-space">            </span>object-fit: contain;</p>
<p class="p1"><span class="Apple-converted-space">            </span>display: none;</p>
<p class="p1"><span class="Apple-converted-space">            </span>border-radius: 12px;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>#loading-indicator, #llm-loading-indicator {</p>
<p class="p1"><span class="Apple-converted-space">            </span>color: var(--text-color-secondary);</p>
<p class="p1"><span class="Apple-converted-space">            </span>font-size: 1.1rem;</p>
<p class="p1"><span class="Apple-converted-space">            </span>text-align: center;</p>
<p class="p1"><span class="Apple-converted-space">            </span>font-weight: 500;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>.controls-row {</p>
<p class="p1"><span class="Apple-converted-space">            </span>display: flex;</p>
<p class="p1"><span class="Apple-converted-space">            </span>flex-wrap: wrap;</p>
<p class="p1"><span class="Apple-converted-space">            </span>gap: 12px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>width: 100%;</p>
<p class="p1"><span class="Apple-converted-space">            </span>justify-content: center;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>.controls-row button {</p>
<p class="p1"><span class="Apple-converted-space">            </span>flex-grow: 1;</p>
<p class="p1"><span class="Apple-converted-space">            </span>min-width: 130px;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>.size-inputs {</p>
<p class="p1"><span class="Apple-converted-space">            </span>display: flex;</p>
<p class="p1"><span class="Apple-converted-space">            </span>flex-wrap: wrap;</p>
<p class="p1"><span class="Apple-converted-space">            </span>gap: 12px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>width: 100%;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>.size-inputs &gt; div {</p>
<p class="p1"><span class="Apple-converted-space">            </span>flex: 1;</p>
<p class="p1"><span class="Apple-converted-space">            </span>min-width: 150px;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>.upload-section {</p>
<p class="p1"><span class="Apple-converted-space">            </span>border-top: 1px solid var(--border-color-light);</p>
<p class="p1"><span class="Apple-converted-space">            </span>padding-top: 24px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>margin-top: 24px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>width: 100%;</p>
<p class="p1"><span class="Apple-converted-space">            </span>text-align: center;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>.upload-section label {</p>
<p class="p1"><span class="Apple-converted-space">            </span>margin-bottom: 12px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>display: block;</p>
<p class="p1"><span class="Apple-converted-space">            </span>font-weight: 700;</p>
<p class="p1"><span class="Apple-converted-space">            </span>color: var(--text-color-secondary);</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>.upload-input-container {</p>
<p class="p1"><span class="Apple-converted-space">            </span>display: flex;</p>
<p class="p1"><span class="Apple-converted-space">            </span>justify-content: center;</p>
<p class="p1"><span class="Apple-converted-space">            </span>align-items: center;</p>
<p class="p1"><span class="Apple-converted-space">            </span>padding: 20px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>border: 2px dashed var(--upload-border-color);</p>
<p class="p1"><span class="Apple-converted-space">            </span>border-radius: 10px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>background-color: var(--upload-bg-color);</p>
<p class="p1"><span class="Apple-converted-space">            </span>cursor: pointer;</p>
<p class="p1"><span class="Apple-converted-space">            </span>transition: all 0.3s ease-in-out;</p>
<p class="p1"><span class="Apple-converted-space">            </span>box-shadow: inset 0 1px 3px var(--shadow-color-light);</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>.upload-input-container:hover {</p>
<p class="p1"><span class="Apple-converted-space">            </span>background-color: var(--upload-hover-bg);</p>
<p class="p1"><span class="Apple-converted-space">            </span>border-color: var(--button-default-bg);</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>.upload-input-container span {</p>
<p class="p1"><span class="Apple-converted-space">            </span>color: var(--text-color-secondary);</p>
<p class="p1"><span class="Apple-converted-space">            </span>font-weight: 600;</p>
<p class="p1"><span class="Apple-converted-space">            </span>display: flex;</p>
<p class="p1"><span class="Apple-converted-space">            </span>align-items: center;</p>
<p class="p1"><span class="Apple-converted-space">            </span>gap: 8px;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>#original-image-preview-container {</p>
<p class="p1"><span class="Apple-converted-space">            </span>width: 100%;</p>
<p class="p1"><span class="Apple-converted-space">            </span>margin-top: 24px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>padding-top: 24px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>border-top: 1px solid var(--border-color-light);</p>
<p class="p1"><span class="Apple-converted-space">            </span>text-align: center;</p>
<p class="p1"><span class="Apple-converted-space">            </span>display: none;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>#original-image-preview-container h3 {</p>
<p class="p1"><span class="Apple-converted-space">            </span>color: var(--text-color-secondary);</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>#original-image-preview {</p>
<p class="p1"><span class="Apple-converted-space">            </span>max-width: 100%;</p>
<p class="p1"><span class="Apple-converted-space">            </span>height: auto;</p>
<p class="p1"><span class="Apple-converted-space">            </span>max-height: 280px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>object-fit: contain;</p>
<p class="p1"><span class="Apple-converted-space">            </span>border-radius: 12px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>box-shadow: 0 4px 15px var(--shadow-color-light);</p>
<p class="p1"><span class="Apple-converted-space">            </span>margin-top: 12px;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>#uploaded-image-gallery-container {</p>
<p class="p1"><span class="Apple-converted-space">            </span>width: 100%;</p>
<p class="p1"><span class="Apple-converted-space">            </span>margin-top: 24px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>padding-top: 24px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>border-top: 1px solid var(--border-color-light);</p>
<p class="p1"><span class="Apple-converted-space">            </span>text-align: center;</p>
<p class="p1"><span class="Apple-converted-space">            </span>display: none;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>#uploaded-image-gallery-container h3 {</p>
<p class="p1"><span class="Apple-converted-space">            </span>color: var(--text-color-secondary);</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>#uploaded-image-gallery {</p>
<p class="p1"><span class="Apple-converted-space">            </span>display: flex;</p>
<p class="p1"><span class="Apple-converted-space">            </span>flex-wrap: wrap;</p>
<p class="p1"><span class="Apple-converted-space">            </span>gap: 15px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>justify-content: center;</p>
<p class="p1"><span class="Apple-converted-space">            </span>margin-top: 20px;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>.gallery-item {</p>
<p class="p1"><span class="Apple-converted-space">            </span>display: flex;</p>
<p class="p1"><span class="Apple-converted-space">            </span>flex-direction: column;</p>
<p class="p1"><span class="Apple-converted-space">            </span>align-items: center;</p>
<p class="p1"><span class="Apple-converted-space">            </span>border: 1px solid var(--gallery-item-border);</p>
<p class="p1"><span class="Apple-converted-space">            </span>border-radius: 10px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>padding: 10px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>background-color: var(--gallery-item-bg);</p>
<p class="p1"><span class="Apple-converted-space">            </span>box-shadow: 0 2px 8px var(--gallery-item-shadow);</p>
<p class="p1"><span class="Apple-converted-space">            </span>transition: all 0.2s ease-in-out;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>.gallery-item:hover {</p>
<p class="p1"><span class="Apple-converted-space">            </span>transform: translateY(-2px);</p>
<p class="p1"><span class="Apple-converted-space">            </span>box-shadow: 0 4px 12px var(--shadow-color-medium); /* Corrected from 4g to 4px */</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>.gallery-item img {</p>
<p class="p1"><span class="Apple-converted-space">            </span>width: 90px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>height: 90px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>object-fit: cover;</p>
<p class="p1"><span class="Apple-converted-space">            </span>border-radius: 8px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>margin-bottom: 8px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>border: 1px solid var(--border-color-light);</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>.gallery-item .item-controls {</p>
<p class="p1"><span class="Apple-converted-space">            </span>display: flex;</p>
<p class="p1"><span class="Apple-converted-space">            </span>gap: 6px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>margin-top: 6px;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>.gallery-item .item-controls button {</p>
<p class="p1"><span class="Apple-converted-space">            </span>padding: 6px 10px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>font-size: 0.8rem;</p>
<p class="p1"><span class="Apple-converted-space">            </span>border-radius: 8px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>background-color: var(--gallery-button-bg);</p>
<p class="p1"><span class="Apple-converted-space">            </span>box-shadow: none;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>.gallery-item .item-controls button:hover {</p>
<p class="p1"><span class="Apple-converted-space">            </span>background-color: var(--gallery-button-hover-bg);</p>
<p class="p1"><span class="Apple-converted-space">            </span>transform: none;</p>
<p class="p1"><span class="Apple-converted-space">            </span>box-shadow: none;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/* Tab Specific Styles */</p>
<p class="p1"><span class="Apple-converted-space">        </span>#tab-navigation {</p>
<p class="p1"><span class="Apple-converted-space">            </span>display: flex;</p>
<p class="p1"><span class="Apple-converted-space">            </span>width: 100%;</p>
<p class="p1"><span class="Apple-converted-space">            </span>margin-bottom: 24px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>border-bottom: 1px solid var(--border-color-light);</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>.tab-button {</p>
<p class="p1"><span class="Apple-converted-space">            </span>flex: 1;</p>
<p class="p1"><span class="Apple-converted-space">            </span>padding: 12px 10px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>font-size: 1.05rem;</p>
<p class="p1"><span class="Apple-converted-space">            </span>font-weight: 600;</p>
<p class="p1"><span class="Apple-converted-space">            </span>color: var(--tab-color-inactive);</p>
<p class="p1"><span class="Apple-converted-space">            </span>background-color: transparent;</p>
<p class="p1"><span class="Apple-converted-space">            </span>border: none;</p>
<p class="p1"><span class="Apple-converted-space">            </span>border-bottom: 3px solid transparent;</p>
<p class="p1"><span class="Apple-converted-space">            </span>transition: all 0.3s ease-in-out;</p>
<p class="p1"><span class="Apple-converted-space">            </span>border-radius: 0;</p>
<p class="p1"><span class="Apple-converted-space">            </span>display: flex;</p>
<p class="p1"><span class="Apple-converted-space">            </span>align-items: center;</p>
<p class="p1"><span class="Apple-converted-space">            </span>justify-content: center;</p>
<p class="p1"><span class="Apple-converted-space">            </span>gap: 8px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>box-shadow: none;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>.tab-button:hover:not(.active) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>color: var(--tab-color-active);</p>
<p class="p1"><span class="Apple-converted-space">            </span>background-color: var(--tab-bg-hover);</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>.tab-button.active {</p>
<p class="p1"><span class="Apple-converted-space">            </span>color: var(--tab-color-active);</p>
<p class="p1"><span class="Apple-converted-space">            </span>border-bottom-color: var(--tab-border-active);</p>
<p class="p1"><span class="Apple-converted-space">            </span>background-color: var(--bg-color-app);</p>
<p class="p1"><span class="Apple-converted-space">            </span>font-weight: 700;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/* SVG Icon Styles */</p>
<p class="p1"><span class="Apple-converted-space">        </span>.tab-button svg {</p>
<p class="p1"><span class="Apple-converted-space">            </span>width: 24px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>height: 24px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>fill: currentColor;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>.tab-content {</p>
<p class="p1"><span class="Apple-converted-space">            </span>width: 100%;</p>
<p class="p1"><span class="Apple-converted-space">            </span>display: none;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>.tab-content.active {</p>
<p class="p1"><span class="Apple-converted-space">            </span>display: flex;</p>
<p class="p1"><span class="Apple-converted-space">            </span>flex-direction: column;</p>
<p class="p1"><span class="Apple-converted-space">            </span>gap: 20px;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/* Specific text colors via CSS variables */</p>
<p class="p1"><span class="Apple-converted-space">        </span>h1.text-3xl { color: var(--text-color-primary); }</p>
<p class="p1"><span class="Apple-converted-space">        </span>p.text-gray-600 { color: var(--text-color-secondary); }</p>
<p class="p1"><span class="Apple-converted-space">        </span>.text-gray-700 { color: var(--text-color-secondary); } /* Labels, headers */</p>
<p class="p1"><span class="Apple-converted-space">        </span>.text-gray-500 { color: var(--text-color-muted); } /* Notes */</p>
<p class="p2"><br></p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>@media (max-width: 640px) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>#app-container {</p>
<p class="p1"><span class="Apple-converted-space">                </span>padding: 18px;</p>
<p class="p1"><span class="Apple-converted-space">                </span>gap: 18px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>.controls-row button {</p>
<p class="p1"><span class="Apple-converted-space">                </span>min-width: unset;</p>
<p class="p1"><span class="Apple-converted-space">                </span>width: 100%;</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>.tab-button {</p>
<p class="p1"><span class="Apple-converted-space">                </span>font-size: 0.9rem;</p>
<p class="p1"><span class="Apple-converted-space">                </span>padding: 10px 5px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>.tab-button svg {</p>
<p class="p1"><span class="Apple-converted-space">                </span>width: 20px;</p>
<p class="p1"><span class="Apple-converted-space">                </span>height: 20px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>#language-select, #theme-select {</p>
<p class="p1"><span class="Apple-converted-space">                </span>margin-bottom: 15px;</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;/style&gt;</p>
<p class="p1">&lt;/head&gt;</p>
<p class="p1">&lt;body&gt;</p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;div id="app-container"&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;!-- Language Selector --&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;div class="input-group mb-4"&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;label for="language-select" class="text-gray-700 font-medium" data-key="languageLabel"&gt;Language:&lt;/label&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;select id="language-select" class="w-full"&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;option value="en"&gt;English&lt;/option&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;option value="vi"&gt;Tiếng Việt&lt;/option&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;option value="es"&gt;Español&lt;/option&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;option value="zh"&gt;中文&lt;/option&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;/select&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;/div&gt;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;!-- Theme Selector --&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;div class="input-group mb-4"&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;label for="theme-select" class="text-gray-700 font-medium" data-key="themeLabel"&gt;Theme:&lt;/label&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;select id="theme-select" class="w-full"&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;option value="system" data-key="themeSystem"&gt;&lt;/option&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;option value="light" data-key="themeLight"&gt;&lt;/option&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;option value="dark" data-key="themeDark"&gt;&lt;/option&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;/select&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;/div&gt;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;h1 class="text-3xl font-bold text-gray-800 text-center mb-4" data-key="mainTitle"&gt;🎵 Music Video Generator 🎬&lt;/h1&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;p class="text-gray-600 text-center mb-6" data-key="mainDescription"&gt;Enter a prompt to generate a sequence of images or upload your own. Play them as a slideshow along with your favorite music!&lt;/p&gt;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;!-- Tab Navigation --&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;div id="tab-navigation"&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;button class="tab-button active" data-tab="ai-create" data-key="tabAiCreate"&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"&gt;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>&lt;path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-1-13h2v6h-2zm0 8h2v2h-2z"/&gt;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>&lt;path d="M0 0h24v24H0z" fill="none"/&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;/svg&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>Create with AI</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;/button&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;button class="tab-button" data-tab="upload" data-key="tabUploadImages"&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"&gt;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>&lt;path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM17 13l-5 5-5-5h3V9h4v4h3z"/&gt;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>&lt;path d="M0 0h24v24H0z" fill="none"/&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;/svg&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>Upload Images</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;/button&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;/div&gt;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;!-- Tab Content Containers --&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;div id="ai-create-tab-content" class="tab-content active"&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;!-- Overall Story / Theme Input --&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;div class="input-group"&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;label for="story-theme-input" class="text-gray-700 font-medium" data-key="storyThemeLabel"&gt;Overall Story / Theme:&lt;/label&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;textarea id="story-theme-input" rows="3" placeholder="e.g., 'A hero's journey through a cybernetic wasteland, from desolation to hope.'" class="w-full" data-key="storyThemePlaceholder"&gt;&lt;/textarea&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;button id="generate-storyboard-button" class="mt-2" data-key="generateStoryboardButton"&gt;✨ Generate Storyboard Prompts&lt;/button&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;/div&gt;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;!-- Image Prompt (now within AI Create tab) --&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;div class="input-group"&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;label for="prompt-input" class="text-gray-700 font-medium" data-key="imagePromptLabel"&gt;Image Prompt (will be populated by Storyboard or manual):&lt;/label&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;textarea id="prompt-input" rows="4" placeholder="e.g., 'futuristic city at night, neon lights, with subtle steam rising from the streets and a vibrant, ethereal glow over the skyscrapers. A lone, abstract figure stands observing the scene, rendered in a painterly style with rich textures and deep colors.'" class="w-full" data-key="imagePromptPlaceholder"&gt;&lt;/textarea&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;button id="enhance-prompt-button" class="mt-2" data-key="enhancePromptButton"&gt;✨ Enhance Prompt&lt;/button&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;p id="llm-loading-indicator" style="display:none;"&gt;&lt;/p&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;/div&gt;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;!-- Number of Images (now within AI Create tab) --&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;div class="input-group"&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;label for="image-count" class="text-gray-700 font-medium" data-key="numImagesLabel"&gt;Number of Images (max 20):&lt;/label&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;input type="number" id="image-count" value="5" min="1" max="20" class="w-full"&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;/div&gt;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;!-- Size Inputs (now within AI Create tab) --&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;div class="size-inputs"&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;div class="input-group"&gt;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>&lt;label for="image-width" class="text-gray-700 font-medium" data-key="imageWidthLabel"&gt;Image Width:&lt;/label&gt;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>&lt;select id="image-width" class="w-full"&gt;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>&lt;option value="512"&gt;512px&lt;/option&gt;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>&lt;option value="768"&gt;768px&lt;/option&gt;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>&lt;option value="1024" selected&gt;1024px (HD)&lt;/option&gt;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>&lt;option value="2048"&gt;2048px (2K)&lt;/option&gt;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>&lt;/select&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;/div&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;div class="input-group"&gt;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>&lt;label for="image-height" class="text-gray-700 font-medium" data-key="imageHeightLabel"&gt;Image Height:&lt;/label&gt;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>&lt;select id="image-height" class="w-full"&gt;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>&lt;option value="512"&gt;512px&lt;/option&gt;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>&lt;option value="768"&gt;768px&lt;/option&gt;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>&lt;option value="1024"&gt;1024px&lt;/option&gt;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>&lt;option value="2048"&gt;2048px&lt;/option&gt;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>&lt;/select&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;/div&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;/div&gt;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;!-- Slideshow Interval (now within AI Create tab) --&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;div class="input-group"&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;label for="interval-input" class="text-gray-700 font-medium" data-key="slideshowIntervalLabel"&gt;Slideshow Interval (milliseconds):&lt;/label&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;input type="number" id="interval-input" value="1000" min="100" max="5000" class="w-full"&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;/div&gt;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;!-- Generate Images Button (now within AI Create tab) --&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;button id="generate-button" data-key="generateImagesButton"&gt;Generate Images&lt;/button&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;/div&gt;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;div id="upload-tab-content" class="tab-content"&gt;</p>
<p class="p1"><span class="Apple-converted-space">             </span>&lt;div class="upload-section"&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;label class="text-gray-700 text-lg font-bold mb-3" data-key="uploadImagesHeader"&gt;Upload Your Own Images&lt;/label&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;div id="upload-input-container-div" class="upload-input-container"&gt;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>&lt;input type="file" id="upload-input" multiple accept="image/*"&gt;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>&lt;span&gt;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6"&gt;</p>
<p class="p1"><span class="Apple-converted-space">                            </span>&lt;path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM17 13l-5 5-5-5h3V9h4v4h3z"/&gt;</p>
<p class="p1"><span class="Apple-converted-space">                            </span>&lt;path d="M0 0h24v24H0z" fill="none"/&gt;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>&lt;/svg&gt;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>&lt;span data-key="uploadInputSpan"&gt;Click here to select images&lt;/span&gt;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>&lt;/span&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;/div&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;p id="upload-status" class="text-gray-600 text-sm mt-2" style="display:none;"&gt;&lt;/p&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;/div&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;/div&gt;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;!-- Controls Row (Persistent outside tabs) --&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;div class="controls-row"&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;button id="play-button" disabled data-key="playVideoButton"&gt;Play Video&lt;/button&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;button id="stop-button" disabled data-key="stopVideoButton"&gt;Stop Video&lt;/button&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;button id="download-images-button" disabled data-key="downloadAllImagesButton"&gt;⬇️ Download All Images&lt;/button&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;button id="download-zip-button" disabled data-key="downloadZipButton"&gt;⬇️ Download Video Frames (ZIP)&lt;/button&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;/div&gt;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;!-- Image Display (Persistent outside tabs) --&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;div id="image-display-container" class="relative"&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;img id="image-display" src="" alt="Generated Image"&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;p id="loading-indicator" style="display:none;"&gt;&lt;/p&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;/div&gt;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;!-- Original Uploaded Image Preview (Persistent outside tabs) --&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;div id="original-image-preview-container"&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;h3 class="text-xl font-bold text-gray-700 mb-2" data-key="originalImagePreviewHeader"&gt;Original Uploaded Image Preview (First Uploaded Image)&lt;/h3&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;img id="original-image-preview" src="" alt="Original Uploaded Image"&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;/div&gt;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;!-- Uploaded Image Gallery (Persistent outside tabs) --&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;div id="uploaded-image-gallery-container"&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;h3 class="text-xl font-bold text-gray-700 mb-2" data-key="uploadedImageGalleryHeader"&gt;Uploaded Image Gallery (Click ⬆️ or ⬇️ to reorder)&lt;/h3&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;div id="uploaded-image-gallery"&gt;</p>
<p class="p1"><span class="Apple-converted-space">                </span>&lt;!-- Image thumbnails will be inserted here by JavaScript --&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;/div&gt;</p>
<p class="p1"><span class="Apple-converted-space">            </span>&lt;p id="gallery-status" class="text-gray-600 text-sm mt-2" style="display:none;"&gt;&lt;/p&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;/div&gt;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;p class="text-sm text-gray-500 text-center mt-4" data-key="note1"&gt;*Please note: Music playback is not supported directly within this application. Please play your music in a separate tab or application.*&lt;/p&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;p class="text-sm text-gray-500 text-center mt-2" data-key="note2"&gt;*This app generates image sequences. To create a full video file (e.g., MP4), download the frames as a ZIP and use external video editing software. Maximum supported image resolution for generation is 2K.*&lt;/p&gt;</p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;/div&gt;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;script&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>console.log("Music Video Generator script loaded.");</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>// Language specific translations</p>
<p class="p1"><span class="Apple-converted-space">        </span>const translations = {</p>
<p class="p1"><span class="Apple-converted-space">            </span>en: {</p>
<p class="p1"><span class="Apple-converted-space">                </span>appTitle: "Music Video Generator",</p>
<p class="p1"><span class="Apple-converted-space">                </span>languageLabel: "Language:",</p>
<p class="p1"><span class="Apple-converted-space">                </span>themeLabel: "Theme:",</p>
<p class="p1"><span class="Apple-converted-space">                </span>themeSystem: "System",</p>
<p class="p1"><span class="Apple-converted-space">                </span>themeLight: "Light",</p>
<p class="p1"><span class="Apple-converted-space">                </span>themeDark: "Dark",</p>
<p class="p1"><span class="Apple-converted-space">                </span>mainTitle: "🎵 Music Video Generator 🎬",</p>
<p class="p1"><span class="Apple-converted-space">                </span>mainDescription: "Enter a prompt to generate a sequence of images or upload your own. Play them as a slideshow along with your favorite music!",</p>
<p class="p1"><span class="Apple-converted-space">                </span>tabAiCreate: "Create with AI",</p>
<p class="p1"><span class="Apple-converted-space">                </span>tabUploadImages: "Upload Images",</p>
<p class="p1"><span class="Apple-converted-space">                </span>storyThemeLabel: "Overall Story / Theme:",</p>
<p class="p1"><span class="Apple-converted-space">                </span>storyThemePlaceholder: "e.g., 'A hero's journey through a cybernetic wasteland, from desolation to hope.'",</p>
<p class="p1"><span class="Apple-converted-space">                </span>generateStoryboardButton: "✨ Generate Storyboard Prompts",</p>
<p class="p1"><span class="Apple-converted-space">                </span>imagePromptLabel: "Image Prompt (will be populated by Storyboard or manual):",</p>
<p class="p1"><span class="Apple-converted-space">                </span>imagePromptPlaceholder: "e.g., 'futuristic city at night, neon lights, with subtle steam rising from the streets and a vibrant, ethereal glow over the skyscrapers. A lone, abstract figure stands observing the scene, rendered in a painterly style with rich textures and deep colors.'",</p>
<p class="p1"><span class="Apple-converted-space">                </span>enhancePromptButton: "✨ Enhance Prompt",</p>
<p class="p1"><span class="Apple-converted-space">                </span>llmLoadingMessage: "Enhancing prompt...",</p>
<p class="p1"><span class="Apple-converted-space">                </span>loadingGeneratingStoryboards: "Generating storyboard prompts...",</p>
<p class="p1"><span class="Apple-converted-space">                </span>numImagesLabel: "Number of Images (max 20):",</p>
<p class="p1"><span class="Apple-converted-space">                </span>imageWidthLabel: "Image Width:",</p>
<p class="p1"><span class="Apple-converted-space">                </span>imageHeightLabel: "Image Height:",</p>
<p class="p1"><span class="Apple-converted-space">                </span>slideshowIntervalLabel: "Slideshow Interval (milliseconds):",</p>
<p class="p1"><span class="Apple-converted-space">                </span>generateImagesButton: "Generate Images",</p>
<p class="p1"><span class="Apple-converted-space">                </span>playVideoButton: "Play Video",</p>
<p class="p1"><span class="Apple-converted-space">                </span>stopVideoButton: "Stop Video",</p>
<p class="p1"><span class="Apple-converted-space">                </span>downloadAllImagesButton: "⬇️ Download All Images",</p>
<p class="p1"><span class="Apple-converted-space">                </span>downloadZipButton: "⬇️ Download Video Frames (ZIP)",</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadImagesHeader: "Upload Your Own Images",</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadInputSpan: "Click here to select images",</p>
<p class="p1"><span class="Apple-converted-space">                </span>loadingIndicatorMessage: "Generating images... This may take a moment.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>originalImagePreviewHeader: "Original Uploaded Image Preview (First Uploaded Image)",</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadedImageGalleryHeader: "Uploaded Image Gallery (Click ⬆️ or ⬇️ to reorder)",</p>
<p class="p1"><span class="Apple-converted-space">                </span>note1: "*Please note: Music playback is not supported directly within this application. Please play your music in a separate tab or application.*",</p>
<p class="p1"><span class="Apple-converted-space">                </span>note2: "*This app generates image sequences. To create a full video file (e.g., MP4), download the frames as a ZIP and use external video editing software. Maximum supported image resolution for generation is 2K.*",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertPromptEmpty: "Please enter an image prompt or generate storyboard prompts.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertImageCountInvalid: "Please enter a valid number of images between 1 and 20.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertImageDimensionsInvalid: "Please select valid image dimensions.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertStoryboardThemeEmpty: "Please enter an overall story or theme to generate storyboard prompts.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertStoryboardEmpty: "The AI generated an empty storyboard. Please try a different theme.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertStoryboardParseError: "Failed to parse storyboard prompts from AI. Please try again.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertStoryboardLLMContentError: "Could not generate storyboard prompts. The AI might not have returned valid content. Please try again.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertImageGenHTTPError: "Error generating image: ",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertImageGenNoPrediction: "Error: Could not generate one or more images. The image generation service might not have returned valid image data. Please try a different prompt or fewer images.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertImageGenUnhandledError: "An unexpected error occurred during image generation. Please check the console for details and try again.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertEnhancePromptEmpty: "Please enter a prompt to enhance.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertEnhancePromptConflict: "Enhancing individual prompts is not available when a storyboard is active or when uploaded images are in use. Clear the content to enhance the main prompt.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertEnhancePromptHTTPError: "Error enhancing prompt: ",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertEnhancePromptLLMContentError: "Could not enhance the prompt. The LLM might not have returned valid text. Please try again or rephrase your original prompt.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertEnhancePromptUnhandledError: "An unexpected error occurred while enhancing the prompt. Please check the console for details and try again.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertNoImagesToDownload: "No images to download. Please generate or upload images first.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertNoImagesToZip: "No images to zip. Please generate or upload images first.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertZipError: "An error occurred while creating or downloading the ZIP file. Please try again.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertUploadFileReadError: "Failed to read file: ",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertNoValidImagesUploaded: "No valid images were uploaded.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertUploadUnhandledError: "An error occurred during upload.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadProcessing: "Processing {{count}} images...",</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadedReady: "{{count}} images uploaded and ready!",</p>
<p class="p1"><span class="Apple-converted-space">                </span>loadingGenerating: "Generating images... This may take a moment.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>loadingUploading: "Uploading images... This may take a moment.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>loadingCreatingZip: "Creating ZIP file...",</p>
<p class="p1"><span class="Apple-converted-space">                </span>galleryStatus: "Showing {{count}} uploaded images.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>moveUp: "⬆️ Move Up",</p>
<p class="p1"><span class="Apple-converted-space">                </span>moveDown: "⬇️ Move Down",</p>
<p class="p1"><span class="Apple-converted-space">                </span>slideshowStartAlert: "Please generate or upload images first to start the slideshow.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>slideshowInvalidInterval: "Please enter a valid interval (at least 100ms).",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertNoImagesGenerated: "No images were generated. Please check your prompt and try again.",</p>
<p class="p1"><span class="Apple-converted-space">            </span>},</p>
<p class="p1"><span class="Apple-converted-space">            </span>vi: {</p>
<p class="p1"><span class="Apple-converted-space">                </span>appTitle: "Trình tạo Video Âm nhạc",</p>
<p class="p1"><span class="Apple-converted-space">                </span>languageLabel: "Ngôn ngữ:",</p>
<p class="p1"><span class="Apple-converted-space">                </span>themeLabel: "Chủ đề:",</p>
<p class="p1"><span class="Apple-converted-space">                </span>themeSystem: "Hệ thống",</p>
<p class="p1"><span class="Apple-converted-space">                </span>themeLight: "Sáng",</p>
<p class="p1"><span class="Apple-converted-space">                </span>themeDark: "Tối",</p>
<p class="p1"><span class="Apple-converted-space">                </span>mainTitle: "🎵 Trình tạo Video Âm nhạc 🎬",</p>
<p class="p1"><span class="Apple-converted-space">                </span>mainDescription: "Nhập một lời nhắc để tạo chuỗi hình ảnh hoặc tải lên hình ảnh của riêng bạn. Phát chúng dưới dạng trình chiếu cùng với âm nhạc yêu thích của bạn!",</p>
<p class="p1"><span class="Apple-converted-space">                </span>tabAiCreate: "Tạo bằng AI",</p>
<p class="p1"><span class="Apple-converted-space">                </span>tabUploadImages: "Tải lên Hình ảnh",</p>
<p class="p1"><span class="Apple-converted-space">                </span>storyThemeLabel: "Câu chuyện / Chủ đề tổng thể:",</p>
<p class="p1"><span class="Apple-converted-space">                </span>storyThemePlaceholder: "ví dụ: 'Hành trình của một anh hùng qua vùng đất hoang tàn mạng lưới, từ sự hoang vắng đến hy vọng.'",</p>
<p class="p1"><span class="Apple-converted-space">                </span>generateStoryboardButton: "✨ Tạo Gợi ý Kịch bản",</p>
<p class="p1"><span class="Apple-converted-space">                </span>imagePromptLabel: "Lời nhắc hình ảnh (sẽ được điền từ Kịch bản hoặc thủ công):",</p>
<p class="p1"><span class="Apple-converted-space">                </span>imagePromptPlaceholder: "ví dụ: 'thành phố tương lai vào ban đêm, đèn neon, với hơi nước thoang thoảng bốc lên từ đường phố và ánh sáng rực rỡ, siêu nhiên trên các tòa nhà chọc trời. Một nhân vật trừu tượng đơn độc đang quan sát cảnh tượng, được thể hiện theo phong cách hội họa với kết cấu phong phú và màu sắc sâu sắc.'",</p>
<p class="p1"><span class="Apple-converted-space">                </span>enhancePromptButton: "✨ Nâng cao Gợi ý",</p>
<p class="p1"><span class="Apple-converted-space">                </span>llmLoadingMessage: "Đang nâng cao gợi ý...",</p>
<p class="p1"><span class="Apple-converted-space">                </span>loadingGeneratingStoryboards: "Đang tạo gợi ý kịch bản...",</p>
<p class="p1"><span class="Apple-converted-space">                </span>numImagesLabel: "Số lượng hình ảnh (tối đa 20):",</p>
<p class="p1"><span class="Apple-converted-space">                </span>imageWidthLabel: "Chiều rộng hình ảnh:",</p>
<p class="p1"><span class="Apple-converted-space">                </span>imageHeightLabel: "Chiều cao hình ảnh:",</p>
<p class="p1"><span class="Apple-converted-space">                </span>slideshowIntervalLabel: "Khoảng thời gian trình chiếu (mili giây):",</p>
<p class="p1"><span class="Apple-converted-space">                </span>generateImagesButton: "Tạo Hình ảnh",</p>
<p class="p1"><span class="Apple-converted-space">                </span>playVideoButton: "Phát Video",</p>
<p class="p1"><span class="Apple-converted-space">                </span>stopVideoButton: "Dừng Video",</p>
<p class="p1"><span class="Apple-converted-space">                </span>downloadAllImagesButton: "⬇️ Tải xuống Tất cả Hình ảnh",</p>
<p class="p1"><span class="Apple-converted-space">                </span>downloadZipButton: "⬇️ Tải xuống Khung Video (ZIP)",</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadImagesHeader: "Tải lên Hình ảnh Của Riêng Bạn",</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadInputSpan: "Nhấp vào đây để chọn hình ảnh",</p>
<p class="p1"><span class="Apple-converted-space">                </span>loadingIndicatorMessage: "Đang tạo hình ảnh... Vui lòng đợi trong giây lát.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>originalImagePreviewHeader: "Xem trước Hình ảnh Gốc Đã Tải lên (Hình ảnh đầu tiên)",</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadedImageGalleryHeader: "Thư viện Hình ảnh Đã Tải lên (Nhấp ⬆️ hoặc ⬇️ để sắp xếp lại)",</p>
<p class="p1"><span class="Apple-converted-space">                </span>note1: "*Xin lưu ý: Ứng dụng này không hỗ trợ phát nhạc nhạc trực tiếp. Vui lòng phát nhạc của bạn trong một tab hoặc ứng dụng riêng biệt.*",</p>
<p class="p1"><span class="Apple-converted-space">                </span>note2: "*Ứng dụng này tạo ra các chuỗi hình ảnh. Để tạo tệp video đầy đủ (ví dụ: MP4), hãy tải xuống các khung dưới dạng ZIP và sử dụng phần mềm chỉnh sửa video bên ngoài. Độ phân giải hình ảnh tối đa được hỗ trợ để tạo là 2K.*",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertPromptEmpty: "Vui lòng nhập lời nhắc hình ảnh hoặc tạo lời nhắc kịch bản.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertImageCountInvalid: "Vui lòng nhập số lượng hình ảnh hợp lệ từ 1 đến 20.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertImageDimensionsInvalid: "Vui lòng chọn kích thước hình ảnh hợp lệ.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertStoryboardThemeEmpty: "Vui lòng nhập một câu chuyện hoặc chủ đề tổng thể để tạo gợi ý kịch bản.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertStoryboardEmpty: "AI đã tạo một kịch bản trống. Vui lòng thử một chủ đề khác.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertStoryboardParseError: "Không thể phân tích cú pháp gợi ý kịch bản từ AI. Vui lòng thử lại.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertStoryboardLLMContentError: "Không thể tạo gợi ý kịch bản. AI có thể không trả về nội dung hợp lệ. Vui lòng thử lại.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertImageGenHTTPError: "Lỗi tạo hình ảnh: ",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertImageGenNoPrediction: "Lỗi: Không thể tạo một hoặc nhiều hình ảnh. Dịch vụ tạo hình ảnh có thể không trả về dữ liệu hình ảnh hợp lệ. Vui lòng thử một lời nhắc khác hoặc độ phân giải nhỏ hơn.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertImageGenUnhandledError: "Đã xảy ra lỗi không mong muốn trong quá trình tạo hình ảnh. Vui lòng kiểm tra bảng điều khiển để biết chi tiết và thử lại.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertEnhancePromptEmpty: "Vui lòng nhập lời nhắc để nâng cao.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertEnhancePromptConflict: "Tính năng nâng cao lời nhắc riêng lẻ không khả dụng khi kịch bản đang hoạt động hoặc khi hình ảnh đã tải lên đang được sử dụng. Vui lòng xóa nội dung để nâng cao lời nhắc chính.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertEnhancePromptHTTPError: "Lỗi nâng cao lời nhắc: ",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertEnhancePromptLLMContentError: "Không thể nâng cao lời nhắc. LLM có thể không trả về văn bản hợp lệ. Vui lòng thử lại hoặc diễn đạt lại lời nhắc ban đầu của bạn.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertEnhancePromptUnhandledError: "Đã xảy ra lỗi không mong muốn trong quá trình nâng cao lời nhắc. Vui lòng kiểm tra bảng điều khiển để biết chi tiết và thử lại.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertNoImagesToDownload: "Không có hình ảnh nào để tải xuống. Vui lòng tạo hoặc tải lên hình ảnh trước.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertNoImagesToZip: "Không có hình ảnh nào để nén. Vui lòng tạo hoặc tải lên hình ảnh trước.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertZipError: "Đã xảy ra lỗi khi tạo hoặc tải xuống tệp ZIP. Vui lòng thử lại.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertUploadFileReadError: "Không thể đọc tệp: ",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertNoValidImagesUploaded: "Không có hình ảnh hợp lệ nào được tải lên.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertUploadUnhandledError: "Đã xảy ra lỗi trong quá trình tải lên.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadProcessing: "Đang xử lý {{count}} hình ảnh...",</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadedReady: "{{count}} hình ảnh đã tải lên và sẵn sàng!",</p>
<p class="p1"><span class="Apple-converted-space">                </span>loadingGenerating: "Đang tạo hình ảnh... Vui lòng đợi trong giây lát.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>loadingUploading: "Đang tải lên hình ảnh... Vui lòng đợi trong giây lát.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>loadingCreatingZip: "Đang tạo tệp ZIP...",</p>
<p class="p1"><span class="Apple-converted-space">                </span>galleryStatus: "Đang hiển thị {{count}} hình ảnh đã tải lên.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>moveUp: "⬆️ Di chuyển lên",</p>
<p class="p1"><span class="Apple-converted-space">                </span>moveDown: "⬇️ Di chuyển xuống",</p>
<p class="p1"><span class="Apple-converted-space">                </span>slideshowStartAlert: "Vui lòng tạo hoặc tải lên hình ảnh trước để bắt đầu trình chiếu.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>slideshowInvalidInterval: "Vui lòng nhập khoảng thời gian hợp lệ (ít nhất 100ms).",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertNoImagesGenerated: "Không có hình ảnh nào được tạo. Vui lòng kiểm tra lời nhắc của bạn và thử lại.",</p>
<p class="p1"><span class="Apple-converted-space">            </span>},</p>
<p class="p1"><span class="Apple-converted-space">            </span>es: {</p>
<p class="p1"><span class="Apple-converted-space">                </span>appTitle: "Generador de Videos Musicales",</p>
<p class="p1"><span class="Apple-converted-space">                </span>languageLabel: "Idioma:",</p>
<p class="p1"><span class="Apple-converted-space">                </span>themeLabel: "Tema:",</p>
<p class="p1"><span class="Apple-converted-space">                </span>themeSystem: "Sistema",</p>
<p class="p1"><span class="Apple-converted-space">                </span>themeLight: "Claro",</p>
<p class="p1"><span class="Apple-converted-space">                </span>themeDark: "Oscuro",</p>
<p class="p1"><span class="Apple-converted-space">                </span>mainTitle: "🎵 Generador de Videos Musicales 🎬",</p>
<p class="p1"><span class="Apple-converted-space">                </span>mainDescription: "Ingrese una instrucción para generar una secuencia de imágenes o suba las suyas. ¡Reprodúzcalas como una presentación de diapositivas junto con su música favorita!",</p>
<p class="p1"><span class="Apple-converted-space">                </span>tabAiCreate: "Crear con IA",</p>
<p class="p1"><span class="Apple-converted-space">                </span>tabUploadImages: "Subir Imágenes",</p>
<p class="p1"><span class="Apple-converted-space">                </span>storyThemeLabel: "Historia / Tema General:",</p>
<p class="p1"><span class="Apple-converted-space">                </span>storyThemePlaceholder: "Ej: 'El viaje de un héroe a través de un páramo cibernético, de la desolación a la esperanza.'",</p>
<p class="p1"><span class="Apple-converted-space">                </span>generateStoryboardButton: "✨ Generar Sugerencias de Guion Gráfico",</p>
<p class="p1"><span class="Apple-converted-space">                </span>imagePromptLabel: "Sugerencia de Imagen (se llenará con Guion Gráfico o manualmente):",</p>
<p class="p1"><span class="Apple-converted-space">                </span>imagePromptPlaceholder: "Ej: 'ciudad futurista por la noche, luces de neón, con vapor sutil elevándose de las calles y un brillo vibrante y etéreo sobre los rascacielos. Una figura solitaria y abstracta observa la escena, representada en un estilo pictórico con texturas ricas y colores profundos.'",</p>
<p class="p1"><span class="Apple-converted-space">                </span>enhancePromptButton: "✨ Mejorar Sugerencia",</p>
<p class="p1"><span class="Apple-converted-space">                </span>llmLoadingMessage: "Mejorando sugerencia...",</p>
<p class="p1"><span class="Apple-converted-space">                </span>loadingGeneratingStoryboards: "Generando sugerencias de guion gráfico...",</p>
<p class="p1"><span class="Apple-converted-space">                </span>numImagesLabel: "Número de Imágenes (máx. 20):",</p>
<p class="p1"><span class="Apple-converted-space">                </span>imageWidthLabel: "Ancho de Imagen:",</p>
<p class="p1"><span class="Apple-converted-space">                </span>imageHeightLabel: "Altura de Imagen:",</p>
<p class="p1"><span class="Apple-converted-space">                </span>slideshowIntervalLabel: "Intervalo de Presentación (milisegundos):",</p>
<p class="p1"><span class="Apple-converted-space">                </span>generateImagesButton: "Generar Imágenes",</p>
<p class="p1"><span class="Apple-converted-space">                </span>playVideoButton: "Reproducir Video",</p>
<p class="p1"><span class="Apple-converted-space">                </span>stopVideoButton: "Detener Video",</p>
<p class="p1"><span class="Apple-converted-space">                </span>downloadAllImagesButton: "⬇️ Descargar Todas las Imágenes",</p>
<p class="p1"><span class="Apple-converted-space">                </span>downloadZipButton: "⬇️ Descargar Cuadros de Video (ZIP)",</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadImagesHeader: "Subir Tus Propias Imágenes",</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadInputSpan: "Haz clic aquí para seleccionar imágenes",</p>
<p class="p1"><span class="Apple-converted-space">                </span>loadingIndicatorMessage: "Generando imágenes... Esto puede tomar un momento.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>originalImagePreviewHeader: "Vista Previa de Imagen Original Subida (Primera Imagen Subida)",</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadedImageGalleryHeader: "Galería de Imágenes Subidas (Clic ⬆️ o ⬇️ para reordenar)",</p>
<p class="p1"><span class="Apple-converted-space">                </span>note1: "*Tenga en cuenta: La reproducción de música no es compatible directamente con esta aplicación. Por favor, reproduzca su música en una pestaña o aplicación separada.*",</p>
<p class="p1"><span class="Apple-converted-space">                </span>note2: "*Esta aplicación genera secuencias de imágenes. Para crear un archivo de video completo (ej: MP4), descargue los cuadros como un ZIP y use un software de edición de video externo. La resolución máxima de imagen soportada para la generación es 2K.*",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertPromptEmpty: "Por favor, ingrese una instrucción de imagen o genere instrucciones de guion gráfico.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertImageCountInvalid: "Por favor, ingrese un número válido de imágenes entre 1 y 20.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertImageDimensionsInvalid: "Por favor, seleccione dimensiones de imagen válidas.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertStoryboardThemeEmpty: "Por favor, ingrese una historia o tema general para generar sugerencias de guion gráfico.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertStoryboardEmpty: "La IA generó un guion gráfico vacío. Por favor, intente con un tema diferente.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertStoryboardParseError: "No se pudo analizar las sugerencias del guion gráfico de la IA. Por favor, intente de nuevo.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertStoryboardLLMContentError: "No se pudieron generar las sugerencias del guion gráfico. Es posible que la IA no haya devuelto contenido válido. Por favor, intente de nuevo.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertImageGenHTTPError: "Error al generar la imagen: ",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertImageGenNoPrediction: "Error: No se pudo generar una o más imágenes. Es posible que el servicio de generación de imágenes no haya devuelto datos de imagen válidos. Por favor, intente con una instrucción diferente o una resolución más pequeña.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertImageGenUnhandledError: "Ocurrió un error inesperado durante la generación de la imagen. Por favor, revise la consola para más detalles e intente de nuevo.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertEnhancePromptEmpty: "Por favor, ingrese una sugerencia para mejorar.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertEnhancePromptConflict: "La mejora de sugerencias individuales no está disponible cuando hay un guion gráfico activo o cuando se están utilizando imágenes subidas. Borre el contenido para mejorar la sugerencia principal.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertEnhancePromptHTTPError: "Error al mejorar la sugerencia: ",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertEnhancePromptLLMContentError: "No se pudo mejorar la sugerencia. Es posible que el LLM no haya devuelto texto válido. Por favor, intente de nuevo o reformule su sugerencia original.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertEnhancePromptUnhandledError: "Ocurrió un error inesperado al mejorar la sugerencia. Por favor, revise la consola para más detalles e intente de nuevo.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertNoImagesToDownload: "No hay imágenes para descargar. Por favor, genere o suba imágenes primero.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertNoImagesToZip: "No hay imágenes para comprimir. Por favor, genere o suba imágenes primero.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertZipError: "Ocurrió un error al crear o descargar el archivo ZIP. Por favor, intente de nuevo.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertUploadFileReadError: "No se pudo leer el archivo: ",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertNoValidImagesUploaded: "No se subieron imágenes válidas.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertUploadUnhandledError: "Ocurrió un error durante la subida.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadProcessing: "Procesando {{count}} imágenes...",</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadedReady: "{{count}} imágenes subidas y listas!",</p>
<p class="p1"><span class="Apple-converted-space">                </span>loadingGenerating: "Generando imágenes... Esto puede tomar un momento.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>loadingUploading: "Subiendo imágenes... Esto puede tomar un momento.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>loadingCreatingZip: "Creando archivo ZIP...",</p>
<p class="p1"><span class="Apple-converted-space">                </span>galleryStatus: "Mostrando {{count}} imágenes subidas.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>moveUp: "⬆️ Mover arriba",</p>
<p class="p1"><span class="Apple-converted-space">                </span>moveDown: "⬇️ Mover abajo",</p>
<p class="p1"><span class="Apple-converted-space">                </span>slideshowStartAlert: "Por favor, genere o suba imágenes primero para iniciar la presentación.",</p>
<p class="p1"><span class="Apple-converted-space">                </span>slideshowInvalidInterval: "Por favor, ingrese un intervalo válido (al menos 100 ms).",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertNoImagesGenerated: "No se generaron imágenes. Por favor, revise su instrucción y pruebe de nuevo.",</p>
<p class="p1"><span class="Apple-converted-space">            </span>},</p>
<p class="p1"><span class="Apple-converted-space">            </span>zh: {</p>
<p class="p1"><span class="Apple-converted-space">                </span>appTitle: "音乐视频生成器",</p>
<p class="p1"><span class="Apple-converted-space">                </span>languageLabel: "语言：",</p>
<p class="p1"><span class="Apple-converted-space">                </span>themeLabel: "主题：",</p>
<p class="p1"><span class="Apple-converted-space">                </span>themeSystem: "系统",</p>
<p class="p1"><span class="Apple-converted-space">                </span>themeLight: "浅色",</p>
<p class="p1"><span class="Apple-converted-space">                </span>themeDark: "深色",</p>
<p class="p1"><span class="Apple-converted-space">                </span>mainTitle: "🎵 音乐视频生成器 🎬",</p>
<p class="p1"><span class="Apple-converted-space">                </span>mainDescription: "输入提示以生成一系列图像或上传您自己的图像。将其作为幻灯片与您喜欢的音乐一起播放！",</p>
<p class="p1"><span class="Apple-converted-space">                </span>tabAiCreate: "AI创作",</p>
<p class="p1"><span class="Apple-converted-space">                </span>tabUploadImages: "上传图片",</p>
<p class="p1"><span class="Apple-converted-space">                </span>storyThemeLabel: "整体故事/主题：",</p>
<p class="p1"><span class="Apple-converted-space">                </span>storyThemePlaceholder: "例如：“一个英雄穿越赛博朋克废土的旅程，从荒凉到希望。”",</p>
<p class="p1"><span class="Apple-converted-space">                </span>generateStoryboardButton: "✨ 生成故事板提示",</p>
<p class="p1"><span class="Apple-converted-space">                </span>imagePromptLabel: "图像提示（将由故事板或手动填充）：",</p>
<p class="p1"><span class="Apple-converted-space">                </span>imagePromptPlaceholder: "例如：“夜晚的未来城市，霓虹灯闪烁，街道上弥漫着微妙的蒸汽，摩天大楼上空弥漫着充满活力的空灵光芒。一个孤独的抽象人物正在观察场景，以丰富纹理和深色调的绘画风格呈现。”",</p>
<p class="p1"><span class="Apple-converted-space">                </span>enhancePromptButton: "✨ 增强提示",</p>
<p class="p1"><span class="Apple-converted-space">                </span>llmLoadingMessage: "正在增强提示...",</p>
<p class="p1"><span class="Apple-converted-space">                </span>loadingGeneratingStoryboards: "正在生成故事板提示...",</p>
<p class="p1"><span class="Apple-converted-space">                </span>numImagesLabel: "图片数量（最多20张）：",</p>
<p class="p1"><span class="Apple-converted-space">                </span>imageWidthLabel: "图片宽度：",</p>
<p class="p1"><span class="Apple-converted-space">                </span>imageHeightLabel: "图片高度：",</p>
<p class="p1"><span class="Apple-converted-space">                </span>slideshowIntervalLabel: "幻灯片间隔（毫秒）：",</p>
<p class="p1"><span class="Apple-converted-space">                </span>generateImagesButton: "生成图片",</p>
<p class="p1"><span class="Apple-converted-space">                </span>playVideoButton: "播放视频",</p>
<p class="p1"><span class="Apple-converted-space">                </span>stopVideoButton: "停止视频",</p>
<p class="p1"><span class="Apple-converted-space">                </span>downloadAllImagesButton: "⬇️ 下载所有图片",</p>
<p class="p1"><span class="Apple-converted-space">                </span>downloadZipButton: "⬇️ 下载视频帧 (ZIP)",</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadImagesHeader: "上传您自己的图片",</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadInputSpan: "点击此处选择图片",</p>
<p class="p1"><span class="Apple-converted-space">                </span>loadingIndicatorMessage: "正在生成图片... 这可能需要一些时间。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>originalImagePreviewHeader: "原始上传图片预览（第一张上传图片）",</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadedImageGalleryHeader: "上传图片库（点击 ⬆️ 或 ⬇️ 重新排序）",</p>
<p class="p1"><span class="Apple-converted-space">                </span>note1: "*请注意：本应用程序不支持直接播放音乐。请在单独的标签页或应用程序中播放您的音乐。*",</p>
<p class="p1"><span class="Apple-converted-space">                </span>note2: "*此应用程序生成图像序列。要创建完整的视频文件（例如 MP4），请将帧下载为 ZIP，并使用外部视频编辑软件。支持的最大生成图像分辨率为 2K。*",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertPromptEmpty: "请输入图像提示或生成故事板提示。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertImageCountInvalid: "请输入1到20之间的有效图像数量。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertImageDimensionsInvalid: "请选择有效的图像尺寸。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertStoryboardThemeEmpty: "请输入一个整体故事或主题来生成故事板提示。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertStoryboardEmpty: "AI 生成了一个空的故事板。请尝试不同的主题。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertStoryboardParseError: "无法从AI解析故事板提示。请重试。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertStoryboardLLMContentError: "无法生成故事板提示。AI 可能没有返回有效内容。请重试。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertImageGenHTTPError: "生成图片时出错：",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertImageGenNoPrediction: "错误：无法生成一张或多张图片。图片生成服务可能未返回有效的图片数据。请尝试不同的提示或更小的分辨率。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertImageGenUnhandledError: "生成图片时发生意外错误。请检查控制台以获取详细信息并重试。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertEnhancePromptEmpty: "请输入要增强的提示。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertEnhancePromptConflict: "当故事板处于活动状态或正在使用上传的图像时，无法增强单个提示。请清除内容以增强主提示。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertEnhancePromptHTTPError: "增强提示时出错：",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertEnhancePromptLLMContentError: "无法增强提示。LLM 可能没有返回有效文本。请重试或重新措辞您的原始提示。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertEnhancePromptUnhandledError: "增强提示时发生意外错误。请检查控制台以获取详细信息并重试。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertNoImagesToDownload: "没有图片可供下载。请先生成或上传图片。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertNoImagesToZip: "没有图片可供压缩。请先生成或上传图片。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertZipError: "创建或下载 ZIP 文件时发生错误。请重试。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertUploadFileReadError: "无法读取文件：",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertNoValidImagesUploaded: "未上传任何有效图片。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertUploadUnhandledError: "上传过程中发生错误。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadProcessing: "正在处理 {{count}} 张图片...",</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadedReady: "{{count}} 张图片已上传并准备就绪！",</p>
<p class="p1"><span class="Apple-converted-space">                </span>loadingGenerating: "正在生成图片... 这可能需要一些时间。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>loadingUploading: "正在上传图片... 这可能需要一些时间。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>loadingCreatingZip: "正在创建 ZIP 文件...",</p>
<p class="p1"><span class="Apple-converted-space">                </span>galleryStatus: "正在显示 {{count}} 张已上传图片。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>moveUp: "⬆️ 上移",</p>
<p class="p1"><span class="Apple-converted-space">                </span>moveDown: "⬇️ 下移",</p>
<p class="p1"><span class="Apple-converted-space">                </span>slideshowStartAlert: "请先生成或上传图片以开始幻灯片播放。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>slideshowInvalidInterval: "请输入一个有效的间隔（至少100毫秒）。",</p>
<p class="p1"><span class="Apple-converted-space">                </span>alertNoImagesGenerated: "没有图片被生成。请检查您的提示并重试。",</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>};</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>let currentLanguage = 'en'; // Default language</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>// Tab elements</p>
<p class="p1"><span class="Apple-converted-space">        </span>const tabButtons = document.querySelectorAll('.tab-button');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const tabContents = document.querySelectorAll('.tab-content');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const languageSelect = document.getElementById('language-select');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const themeSelect = document.getElementById('theme-select'); // NEW</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>// Existing elements</p>
<p class="p1"><span class="Apple-converted-space">        </span>const storyThemeInput = document.getElementById('story-theme-input');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const generateStoryboardButton = document.getElementById('generate-storyboard-button');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const promptInput = document.getElementById('prompt-input');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const imageCountInput = document.getElementById('image-count');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const imageWidthSelect = document.getElementById('image-width');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const imageHeightSelect = document.getElementById('image-height');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const intervalInput = document.getElementById('interval-input');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const generateButton = document.getElementById('generate-button');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const playButton = document.getElementById('play-button');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const stopButton = document.getElementById('stop-button');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const downloadImagesButton = document.getElementById('download-images-button');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const downloadZipButton = document.getElementById('download-zip-button');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const imageDisplay = document.getElementById('image-display');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const loadingIndicator = document.getElementById('loading-indicator');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const enhancePromptButton = document.getElementById('enhance-prompt-button');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const llmLoadingIndicator = document.getElementById('llm-loading-indicator');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const uploadInput = document.getElementById('upload-input');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const uploadInputContainerDiv = document.getElementById('upload-input-container-div');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const uploadStatus = document.getElementById('upload-status');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const originalImagePreviewContainer = document.getElementById('original-image-preview-container');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const originalImagePreview = document.getElementById('original-image-preview');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const uploadedImageGalleryContainer = document.getElementById('uploaded-image-gallery-container');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const uploadedImageGallery = document.getElementById('uploaded-image-gallery');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const galleryStatus = document.getElementById('gallery-status');</p>
<p class="p2"><br></p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>let generatedImages = [];</p>
<p class="p1"><span class="Apple-converted-space">        </span>let currentImageIndex = 0;</p>
<p class="p1"><span class="Apple-converted-space">        </span>let slideshowInterval;</p>
<p class="p1"><span class="Apple-converted-space">        </span>let isFromUpload = false;</p>
<p class="p1"><span class="Apple-converted-space">        </span>let storyboardPrompts = [];</p>
<p class="p1"><span class="Apple-converted-space">        </span>let isGeneratingStoryboard = false;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/**</p>
<p class="p1"><span class="Apple-converted-space">         </span>* Applies the selected theme to the body.</p>
<p class="p1"><span class="Apple-converted-space">         </span>* @param {string} themeName 'light', 'dark', or 'system'.</p>
<p class="p1"><span class="Apple-converted-space">         </span>*/</p>
<p class="p1"><span class="Apple-converted-space">        </span>function applyTheme(themeName) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log(`[applyTheme] Applying theme: ${themeName}`);</p>
<p class="p1"><span class="Apple-converted-space">            </span>const body = document.body;</p>
<p class="p1"><span class="Apple-converted-space">            </span>body.removeAttribute('data-theme'); // Clear any existing theme</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>if (themeName === 'dark') {</p>
<p class="p1"><span class="Apple-converted-space">                </span>body.setAttribute('data-theme', 'dark');</p>
<p class="p1"><span class="Apple-converted-space">            </span>} else if (themeName === 'light') {</p>
<p class="p1"><span class="Apple-converted-space">                </span>// Light theme is the default via CSS variables on :root, so no data-theme needed</p>
<p class="p1"><span class="Apple-converted-space">            </span>} else if (themeName === 'system') {</p>
<p class="p1"><span class="Apple-converted-space">                </span>// Check system preference immediately</p>
<p class="p1"><span class="Apple-converted-space">                </span>if (window.matchMedia('(prefers-color-scheme: dark)').matches) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>body.setAttribute('data-theme', 'dark');</p>
<p class="p1"><span class="Apple-converted-space">                </span>}</p>
<p class="p1"><span class="Apple-converted-space">                </span>// The media query listener will handle subsequent changes</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>localStorage.setItem('selectedTheme', themeName);</p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log(`[applyTheme] Theme set to: ${themeName}, saved to localStorage.`);</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/**</p>
<p class="p1"><span class="Apple-converted-space">         </span>* Handles changes to the system's preferred color scheme when 'system' theme is active.</p>
<p class="p1"><span class="Apple-converted-space">         </span>* @param {MediaQueryListEvent} event</p>
<p class="p1"><span class="Apple-converted-space">         </span>*/</p>
<p class="p1"><span class="Apple-converted-space">        </span>const systemThemeChangeHandler = (event) =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">            </span>if (themeSelect.value === 'system') { // Only react if 'system' theme is chosen</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.log(`[systemThemeChangeHandler] System theme changed. Dark mode active: ${event.matches}`);</p>
<p class="p1"><span class="Apple-converted-space">                </span>if (event.matches) { // If system switches to dark</p>
<p class="p1"><span class="Apple-converted-space">                    </span>document.body.setAttribute('data-theme', 'dark');</p>
<p class="p1"><span class="Apple-converted-space">                </span>} else { // If system switches to light</p>
<p class="p1"><span class="Apple-converted-space">                    </span>document.body.removeAttribute('data-theme');</p>
<p class="p1"><span class="Apple-converted-space">                </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>};</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>// Listen for system theme changes globally</p>
<p class="p1"><span class="Apple-converted-space">        </span>const mediaQueryList = window.matchMedia('(prefers-color-scheme: dark)');</p>
<p class="p1"><span class="Apple-converted-space">        </span>mediaQueryList.addEventListener('change', systemThemeChangeHandler);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/**</p>
<p class="p1"><span class="Apple-converted-space">         </span>* Translates all elements with a data-key attribute to the current language.</p>
<p class="p1"><span class="Apple-converted-space">         </span>*/</p>
<p class="p1"><span class="Apple-converted-space">        </span>function applyTranslations() {</p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log(`[applyTranslations] Applying translations for language: ${currentLanguage}`);</p>
<p class="p1"><span class="Apple-converted-space">            </span>document.querySelectorAll('[data-key]').forEach(element =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">                </span>const key = element.dataset.key;</p>
<p class="p1"><span class="Apple-converted-space">                </span>const translation = translations[currentLanguage][key];</p>
<p class="p1"><span class="Apple-converted-space">                </span>if (translation) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>if (element.tagName === 'INPUT' &amp;&amp; element.hasAttribute('placeholder')) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>element.placeholder = translation;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>} else if (element.tagName === 'TEXTAREA' &amp;&amp; element.hasAttribute('placeholder')) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>element.placeholder = translation;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>} else if (element.tagName === 'TITLE') {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>document.title = translation; // Update page title</p>
<p class="p1"><span class="Apple-converted-space">                    </span>} else if (element.dataset.tab) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>// For tab buttons, update text content directly while preserving SVG</p>
<p class="p1"><span class="Apple-converted-space">                        </span>const svgHtml = element.querySelector('svg') ? element.querySelector('svg').outerHTML : '';</p>
<p class="p1"><span class="Apple-converted-space">                        </span>element.innerHTML = `${svgHtml} ${translation}`;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>} else if (element.tagName === 'OPTION' &amp;&amp; element.closest('#theme-select')) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>// This specific logic is handled by `applyThemeOptionsTranslations` below.</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>else {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>element.textContent = translation;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>});</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>// Specific translation for theme options as they are not standard data-key elements</p>
<p class="p1"><span class="Apple-converted-space">            </span>applyThemeOptionsTranslations();</p>
<p class="p2"><br></p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>// Update specific dynamic messages</p>
<p class="p1"><span class="Apple-converted-space">            </span>llmLoadingIndicator.textContent = isGeneratingStoryboard ? translations[currentLanguage].loadingGeneratingStoryboards : translations[currentLanguage].llmLoadingMessage;</p>
<p class="p1"><span class="Apple-converted-space">            </span>if (loadingIndicator.style.display !== 'none') {</p>
<p class="p1"><span class="Apple-converted-space">                 </span>loadingIndicator.textContent = isFromUpload ? translations[currentLanguage].loadingUploading : translations[currentLanguage].loadingGenerating;</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>if (uploadStatus.style.display !== 'none') {</p>
<p class="p1"><span class="Apple-converted-space">                </span>// Get the original text content to extract numbers before translation</p>
<p class="p1"><span class="Apple-converted-space">                </span>const originalUploadStatusText = uploadStatus.textContent;</p>
<p class="p1"><span class="Apple-converted-space">                </span>const countMatch = originalUploadStatusText.match(/\d+/);</p>
<p class="p1"><span class="Apple-converted-space">                </span>const count = countMatch ? parseInt(countMatch[0], 10) : 0;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>// Check for keywords from the *English* version of the original text to determine the state</p>
<p class="p1"><span class="Apple-converted-space">                </span>if (originalUploadStatusText.includes("Processing")) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>uploadStatus.textContent = translations[currentLanguage].uploadProcessing.replace('{{count}}', count);</p>
<p class="p1"><span class="Apple-converted-space">                </span>} else if (originalUploadStatusText.includes("uploaded and ready")) {</p>
<p class="p1"><span class="Apple-converted-space">                     </span>uploadStatus.textContent = translations[currentLanguage].uploadedReady.replace('{{count}}', count);</p>
<p class="p1"><span class="Apple-converted-space">                </span>} else if (originalUploadStatusText.includes("No valid images")) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>uploadStatus.textContent = translations[currentLanguage].alertNoValidImagesUploaded;</p>
<p class="p1"><span class="Apple-converted-space">                </span>} else if (originalUploadStatusText.includes("error")) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>uploadStatus.textContent = translations[currentLanguage].alertUploadUnhandledError;</p>
<p class="p1"><span class="Apple-converted-space">                </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>if (galleryStatus.style.display !== 'none') {</p>
<p class="p1"><span class="Apple-converted-space">                </span>const originalGalleryStatusText = galleryStatus.textContent;</p>
<p class="p1"><span class="Apple-converted-space">                </span>const countMatch = originalGalleryStatusText.match(/\d+/);</p>
<p class="p1"><span class="Apple-converted-space">                </span>const count = countMatch ? parseInt(countMatch[0], 10) : 0;</p>
<p class="p1"><span class="Apple-converted-space">                </span>galleryStatus.textContent = translations[currentLanguage].galleryStatus.replace('{{count}}', count);</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>// Update gallery buttons if gallery is visible</p>
<p class="p1"><span class="Apple-converted-space">            </span>if (uploadedImageGalleryContainer.style.display === 'block') {</p>
<p class="p1"><span class="Apple-converted-space">                </span>document.querySelectorAll('.gallery-item .item-controls button:first-child').forEach(btn =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>btn.textContent = translations[currentLanguage].moveUp;</p>
<p class="p1"><span class="Apple-converted-space">                </span>});</p>
<p class="p1"><span class="Apple-converted-space">                </span>document.querySelectorAll('.gallery-item .item-controls button:last-child').forEach(btn =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>btn.textContent = translations[currentLanguage].moveDown;</p>
<p class="p1"><span class="Apple-converted-space">                </span>});</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/**</p>
<p class="p1"><span class="Apple-converted-space">         </span>* Translates the text content of theme options based on their data-key.</p>
<p class="p1"><span class="Apple-converted-space">         </span>*/</p>
<p class="p1"><span class="Apple-converted-space">        </span>function applyThemeOptionsTranslations() {</p>
<p class="p1"><span class="Apple-converted-space">            </span>document.querySelectorAll('#theme-select option').forEach(option =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">                </span>const key = `theme${option.value.charAt(0).toUpperCase() + option.value.slice(1)}`; // e.g., 'themeSystem', 'themeLight', 'themeDark'</p>
<p class="p1"><span class="Apple-converted-space">                </span>if (translations[currentLanguage][key]) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>option.textContent = translations[currentLanguage][key];</p>
<p class="p1"><span class="Apple-converted-space">                </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>});</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/**</p>
<p class="p1"><span class="Apple-converted-space">         </span>* Shows the selected tab and hides others.</p>
<p class="p1"><span class="Apple-converted-space">         </span>* @param {string} tabId The ID of the tab to show (e.g., 'ai-create', 'upload').</p>
<p class="p1"><span class="Apple-converted-space">         </span>*/</p>
<p class="p1"><span class="Apple-converted-space">        </span>function showTab(tabId) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log(`[showTab] Switching to tab: ${tabId}`);</p>
<p class="p1"><span class="Apple-converted-space">            </span>tabContents.forEach(content =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">                </span>content.classList.remove('active');</p>
<p class="p1"><span class="Apple-converted-space">            </span>});</p>
<p class="p1"><span class="Apple-converted-space">            </span>tabButtons.forEach(button =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">                </span>button.classList.remove('active');</p>
<p class="p1"><span class="Apple-converted-space">            </span>});</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>document.getElementById(`${tabId}-tab-content`).classList.add('active');</p>
<p class="p1"><span class="Apple-converted-space">            </span>document.querySelector(`.tab-button[data-tab="${tabId}"]`).classList.add('active');</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>// Adjust overall UI state based on active tab after the switch</p>
<p class="p1"><span class="Apple-converted-space">            </span>updateUIState(false, false, false, false);</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/**</p>
<p class="p1"><span class="Apple-converted-space">         </span>* Disables/enables UI elements during various states (loading, playing, etc.).</p>
<p class="p1"><span class="Apple-converted-space">         </span>* @param {boolean} isLoading True if generating images, false otherwise.</p>
<p class="p1"><span class="Apple-converted-space">         </span>* @param {boolean} isLlmLoading True if enhancing prompt/storyboard, false otherwise.</p>
<p class="p1"><span class="Apple-converted-space">         </span>* @param {boolean} isPlaying True if slideshow is playing, false otherwise.</p>
<p class="p1"><span class="Apple-converted-space">         </span>* @param {boolean} isUploading True if images are being uploaded, false otherwise.</p>
<p class="p1"><span class="Apple-converted-space">         </span>*/</p>
<p class="p1"><span class="Apple-converted-space">        </span>function updateUIState(isLoading, isLlmLoading, isPlaying, isUploading) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log(`[updateUIState] Called with: isLoading=${isLoading}, isLlmLoading=${isLlmLoading}, isPlaying=${isPlaying}, isUploading=${isUploading}`);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>// Determine active tab (now only 'ai-create' or 'upload')</p>
<p class="p1"><span class="Apple-converted-space">            </span>const activeTab = document.querySelector('.tab-button.active')?.dataset.tab;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>// Common disabling logic for AI-related inputs</p>
<p class="p1"><span class="Apple-converted-space">            </span>const disableAIRelatedInputs = isLoading || isLlmLoading || isPlaying || isUploading || isFromUpload;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>// Prompt input, enhance button, image count input disabled if generating/uploading/playing,</p>
<p class="p1"><span class="Apple-converted-space">            </span>// or if storyboard is active (in 'ai-create' tab), or if images are uploaded.</p>
<p class="p1"><span class="Apple-converted-space">            </span>// These inputs are ONLY relevant to AI generation.</p>
<p class="p1"><span class="Apple-converted-space">            </span>promptInput.disabled = disableAIRelatedInputs || (storyboardPrompts.length &gt; 0 &amp;&amp; activeTab === 'ai-create');</p>
<p class="p1"><span class="Apple-converted-space">            </span>enhancePromptButton.disabled = disableAIRelatedInputs || (storyboardPrompts.length &gt; 0 &amp;&amp; activeTab === 'ai-create');</p>
<p class="p1"><span class="Apple-converted-space">            </span>imageCountInput.disabled = disableAIRelatedInputs || (storyboardPrompts.length &gt; 0 &amp;&amp; activeTab === 'ai-create');</p>
<p class="p2"><br></p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>// Image size and interval inputs are generally disabled during any active process</p>
<p class="p1"><span class="Apple-converted-space">            </span>imageWidthSelect.disabled = isLoading || isLlmLoading || isPlaying || isUploading;</p>
<p class="p1"><span class="Apple-converted-space">            </span>imageHeightSelect.disabled = isLoading || isLlmLoading || isPlaying || isUploading;</p>
<p class="p1"><span class="Apple-converted-space">            </span>intervalInput.disabled = isLoading || isLlmLoading || isPlaying || isUploading;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>// Generate button is disabled during any active process</p>
<p class="p1"><span class="Apple-converted-space">            </span>generateButton.disabled = isLoading || isLlmLoading || isPlaying || isUploading;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>// Upload input and its container are disabled during any active process</p>
<p class="p1"><span class="Apple-converted-space">            </span>uploadInput.disabled = isLoading || isLlmLoading || isPlaying || isUploading;</p>
<p class="p1"><span class="Apple-converted-space">            </span>uploadInputContainerDiv.style.pointerEvents = (isLoading || isLlmLoading || isPlaying || isUploading) ? 'none' : 'auto';</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>// Storyboard specific controls</p>
<p class="p1"><span class="Apple-converted-space">            </span>storyThemeInput.disabled = isLoading || isLlmLoading || isPlaying || isUploading;</p>
<p class="p1"><span class="Apple-converted-space">            </span>generateStoryboardButton.disabled = isLoading || isLlmLoading || isPlaying || isUploading;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>// Tab buttons themselves should be disabled during any active process</p>
<p class="p1"><span class="Apple-converted-space">            </span>tabButtons.forEach(button =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">                </span>button.disabled = isLoading || isLlmLoading || isPlaying || isUploading;</p>
<p class="p1"><span class="Apple-converted-space">                </span>button.style.pointerEvents = (isLoading || isLlmLoading || isPlaying || isUploading) ? 'none' : 'auto';</p>
<p class="p1"><span class="Apple-converted-space">            </span>});</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>// Language and Theme selects should also be disabled during heavy processing</p>
<p class="p1"><span class="Apple-converted-space">            </span>languageSelect.disabled = isLoading || isLlmLoading || isPlaying || isUploading;</p>
<p class="p1"><span class="Apple-converted-space">            </span>themeSelect.disabled = isLoading || isLlmLoading || isPlaying || isUploading;</p>
<p class="p2"><br></p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>// Image display and specific button states</p>
<p class="p1"><span class="Apple-converted-space">            </span>if (isLoading || isUploading) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>loadingIndicator.style.display = 'block';</p>
<p class="p1"><span class="Apple-converted-space">                </span>loadingIndicator.textContent = isLoading ? translations[currentLanguage].loadingGenerating : translations[currentLanguage].loadingUploading;</p>
<p class="p1"><span class="Apple-converted-space">                </span>imageDisplay.style.display = 'none';</p>
<p class="p1"><span class="Apple-converted-space">                </span>playButton.disabled = true;</p>
<p class="p1"><span class="Apple-converted-space">                </span>stopButton.disabled = true;</p>
<p class="p1"><span class="Apple-converted-space">                </span>downloadImagesButton.disabled = true;</p>
<p class="p1"><span class="Apple-converted-space">                </span>downloadZipButton.disabled = true;</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadStatus.style.display = 'none';</p>
<p class="p1"><span class="Apple-converted-space">                </span>originalImagePreviewContainer.style.display = 'none'; // Hide preview during any processing</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadedImageGalleryContainer.style.display = 'none'; // Hide gallery during processing</p>
<p class="p1"><span class="Apple-converted-space">            </span>} else {</p>
<p class="p1"><span class="Apple-converted-space">                </span>loadingIndicator.style.display = 'none';</p>
<p class="p1"><span class="Apple-converted-space">                </span>if (generatedImages.length &gt; 0) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>imageDisplay.style.display = 'block';</p>
<p class="p1"><span class="Apple-converted-space">                    </span>playButton.disabled = isPlaying;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>downloadImagesButton.disabled = false;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>downloadZipButton.disabled = false;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                    </span>// Show original image preview and gallery only if images came from upload</p>
<p class="p1"><span class="Apple-converted-space">                    </span>originalImagePreviewContainer.style.display = isFromUpload ? 'block' : 'none';</p>
<p class="p1"><span class="Apple-converted-space">                    </span>uploadedImageGalleryContainer.style.display = isFromUpload ? 'block' : 'none';</p>
<p class="p1"><span class="Apple-converted-space">                </span>} else {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>imageDisplay.style.display = 'none';</p>
<p class="p1"><span class="Apple-converted-space">                    </span>playButton.disabled = true;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>downloadImagesButton.disabled = true;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>downloadZipButton.disabled = true;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>originalImagePreviewContainer.style.display = 'none';</p>
<p class="p1"><span class="Apple-converted-space">                    </span>uploadedImageGalleryContainer.style.display = 'none';</p>
<p class="p1"><span class="Apple-converted-space">                </span>}</p>
<p class="p1"><span class="Apple-converted-space">                </span>stopButton.disabled = !isPlaying;</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>// LLM loading indicator state (for prompt enhancement AND storyboard generation)</p>
<p class="p1"><span class="Apple-converted-space">            </span>llmLoadingIndicator.style.display = isLlmLoading ? 'block' : 'none';</p>
<p class="p1"><span class="Apple-converted-space">            </span>llmLoadingIndicator.textContent = isGeneratingStoryboard ? translations[currentLanguage].loadingGeneratingStoryboards : translations[currentLanguage].llmLoadingMessage;</p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log(`[updateUIState] UI state updated.`);</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/**</p>
<p class="p1"><span class="Apple-converted-space">         </span>* Clears all existing images and resets the slideshow state.</p>
<p class="p1"><span class="Apple-converted-space">         </span>* Also resets the `isFromUpload` flag and storyboard related variables.</p>
<p class="p1"><span class="Apple-converted-space">         </span>*/</p>
<p class="p1"><span class="Apple-converted-space">        </span>function clearAndResetImages() {</p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log("[clearAndResetImages] Clearing and resetting images and slideshow state.");</p>
<p class="p1"><span class="Apple-converted-space">            </span>generatedImages = [];</p>
<p class="p1"><span class="Apple-converted-space">            </span>currentImageIndex = 0;</p>
<p class="p1"><span class="Apple-converted-space">            </span>stopSlideshow();</p>
<p class="p1"><span class="Apple-converted-space">            </span>imageDisplay.src = '';</p>
<p class="p1"><span class="Apple-converted-space">            </span>imageDisplay.style.display = 'none';</p>
<p class="p1"><span class="Apple-converted-space">            </span>uploadStatus.textContent = '';</p>
<p class="p1"><span class="Apple-converted-space">            </span>uploadStatus.style.display = 'none';</p>
<p class="p1"><span class="Apple-converted-space">            </span>originalImagePreview.src = '';</p>
<p class="p1"><span class="Apple-converted-space">            </span>originalImagePreviewContainer.style.display = 'none';</p>
<p class="p1"><span class="Apple-converted-space">            </span>uploadedImageGallery.innerHTML = ''; // Clear gallery content</p>
<p class="p1"><span class="Apple-converted-space">            </span>uploadedImageGalleryContainer.style.display = 'none'; // Hide gallery container</p>
<p class="p1"><span class="Apple-converted-space">            </span>galleryStatus.textContent = '';</p>
<p class="p1"><span class="Apple-converted-space">            </span>galleryStatus.style.display = 'none';</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>isFromUpload = false;</p>
<p class="p1"><span class="Apple-converted-space">            </span>storyboardPrompts = [];</p>
<p class="p1"><span class="Apple-converted-space">            </span>// Re-enable inputs for AI creation mode (as they would be if no storyboard was active)</p>
<p class="p1"><span class="Apple-converted-space">            </span>imageCountInput.disabled = false;</p>
<p class="p1"><span class="Apple-converted-space">            </span>promptInput.disabled = false;</p>
<p class="p1"><span class="Apple-converted-space">            </span>enhancePromptButton.disabled = false;</p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log("[clearAndResetImages] Images and state reset.");</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/**</p>
<p class="p1"><span class="Apple-converted-space">         </span>* Generates a sequence of detailed image prompts based on a high-level story/theme using Gemini API.</p>
<p class="p1"><span class="Apple-converted-space">         </span>*/</p>
<p class="p1"><span class="Apple-converted-space">        </span>async function generateStoryboardPrompts() {</p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log("[generateStoryboardPrompts] Generate Storyboard Prompts button clicked.");</p>
<p class="p1"><span class="Apple-converted-space">            </span>const storyTheme = storyThemeInput.value.trim();</p>
<p class="p1"><span class="Apple-converted-space">            </span>if (!storyTheme) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>alert(translations[currentLanguage].alertStoryboardThemeEmpty);</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.warn("[generateStoryboardPrompts] Story/Theme is empty.");</p>
<p class="p1"><span class="Apple-converted-space">                </span>return;</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>clearAndResetImages();</p>
<p class="p1"><span class="Apple-converted-space">            </span>isGeneratingStoryboard = true;</p>
<p class="p1"><span class="Apple-converted-space">            </span>updateUIState(false, true, false, false); // Show LLM loading for storyboard</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>try {</p>
<p class="p1"><span class="Apple-converted-space">                </span>let chatHistory = [];</p>
<p class="p1"><span class="Apple-converted-space">                </span>chatHistory.push({</p>
<p class="p1"><span class="Apple-converted-space">                    </span>role: "user",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>parts: [{</p>
<p class="p1"><span class="Apple-converted-space">                        </span>text: `Generate a sequence of 5 to 10 detailed image prompts that tell a cohesive visual story based on the theme: "${storyTheme}". Each prompt should describe a distinct scene or progression in the narrative, suitable for a music video. Provide the prompts as a JSON array of strings. Example: ["prompt 1", "prompt 2", "prompt 3"]. Only return the JSON array, no other text.`</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}]</p>
<p class="p1"><span class="Apple-converted-space">                </span>});</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>const payload = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>contents: chatHistory,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>generationConfig: {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>responseMimeType: "application/json",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>responseSchema: {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>type: "ARRAY",</p>
<p class="p1"><span class="Apple-converted-space">                            </span>items: { "type": "STRING" }</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                </span>};</p>
<p class="p1"><span class="Apple-converted-space">                </span>const apiKey = ""; // API key is provided by the Canvas environment at runtime</p>
<p class="p1"><span class="Apple-converted-space">                </span>const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>console.log("[generateStoryboardPrompts] Initiating fetch for storyboard prompts with payload:", payload);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>const response = await fetch(apiUrl, {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>method: 'POST',</p>
<p class="p1"><span class="Apple-converted-space">                    </span>headers: { 'Content-Type': 'application/json' },</p>
<p class="p1"><span class="Apple-converted-space">                    </span>body: JSON.stringify(payload)</p>
<p class="p1"><span class="Apple-converted-space">                </span>});</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>console.log(`[generateStoryboardPrompts] Response status: ${response.status} ${response.statusText}`);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>if (!response.ok) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>const errorData = await response.json();</p>
<p class="p1"><span class="Apple-converted-space">                    </span>console.error('[generateStoryboardPrompts] HTTP error:', errorData);</p>
<p class="p1"><span class="Apple-converted-space">                    </span>alert(`${translations[currentLanguage].alertImageGenHTTPError} ${errorData.error ? errorData.error.message : response.statusText}.`);</p>
<p class="p1"><span class="Apple-converted-space">                    </span>return;</p>
<p class="p1"><span class="Apple-converted-space">                </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>const result = await response.json();</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.log("[generateStoryboardPrompts] Raw LLM result:", result);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>if (result.candidates &amp;&amp; result.candidates.length &gt; 0 &amp;&amp;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>result.candidates[0].content &amp;&amp; result.candidates[0].content.parts &amp;&amp;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>result.candidates[0].content.parts.length &gt; 0) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>const jsonString = result.candidates[0].content.parts[0].text;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                    </span>// NEW: Check for empty or non-string content before JSON.parse</p>
<p class="p1"><span class="Apple-converted-space">                    </span>if (typeof jsonString !== 'string' || !jsonString.trim()) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>console.error('[generateStoryboardPrompts] LLM returned non-string or empty content where JSON was expected:', jsonString);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>alert(translations[currentLanguage].alertStoryboardParseError + " (AI returned empty/invalid content).");</p>
<p class="p1"><span class="Apple-converted-space">                        </span>imageCountInput.disabled = false;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>enhancePromptButton.disabled = false;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return; // Exit if content is not a valid string for JSON parsing</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                    </span>try {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>const parsedPrompts = JSON.parse(jsonString);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (Array.isArray(parsedPrompts) &amp;&amp; parsedPrompts.every(p =&gt; typeof p === 'string')) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>storyboardPrompts = parsedPrompts;</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (storyboardPrompts.length &gt; 0) {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>promptInput.value = storyboardPrompts[0]; // Set the first prompt</p>
<p class="p1"><span class="Apple-converted-space">                                </span>imageCountInput.value = storyboardPrompts.length; // Set image count to storyboard length</p>
<p class="p1"><span class="Apple-converted-space">                                </span>// Disable related inputs as they are now controlled by storyboard</p>
<p class="p1"><span class="Apple-converted-space">                                </span>imageCountInput.disabled = true;</p>
<p class="p1"><span class="Apple-converted-space">                                </span>enhancePromptButton.disabled = true;</p>
<p class="p1"><span class="Apple-converted-space">                                </span>console.log(`[generateStoryboardPrompts] Storyboard generated successfully. Number of prompts: ${storyboardPrompts.length}`);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>} else {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>alert(translations[currentLanguage].alertStoryboardEmpty);</p>
<p class="p1"><span class="Apple-converted-space">                                </span>console.warn("[generateStoryboardPrompts] AI returned empty array.");</p>
<p class="p1"><span class="Apple-converted-space">                                </span>// Re-enable inputs if storyboard is empty</p>
<p class="p1"><span class="Apple-converted-space">                                </span>imageCountInput.disabled = false;</p>
<p class="p1"><span class="Apple-converted-space">                                </span>enhancePromptButton.disabled = false;</p>
<p class="p1"><span class="Apple-converted-space">                            </span>}</p>
<p class="p1"><span class="Apple-converted-space">                        </span>} else {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>throw new Error("Invalid JSON structure received. Expected array of strings.");</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>} catch (parseError) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>console.error('[generateStoryboardPrompts] Error parsing JSON response:', parseError, 'Raw JSON string:', jsonString);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>alert(translations[currentLanguage].alertStoryboardParseError);</p>
<p class="p1"><span class="Apple-converted-space">                         </span>// Re-enable inputs on parse error</p>
<p class="p1"><span class="Apple-converted-space">                        </span>imageCountInput.disabled = false;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>enhancePromptButton.disabled = false;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                </span>} else {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>console.error('[generateStoryboardPrompts] Failed to get storyboard prompts from LLM (no content or unexpected structure):', result);</p>
<p class="p1"><span class="Apple-converted-space">                    </span>alert(translations[currentLanguage].alertStoryboardLLMContentError);</p>
<p class="p1"><span class="Apple-converted-space">                    </span>// Re-enable inputs if LLM returns no content</p>
<p class="p1"><span class="Apple-converted-space">                    </span>imageCountInput.disabled = false;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>enhancePromptButton.disabled = false;</p>
<p class="p1"><span class="Apple-converted-space">                </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>} catch (error) { // This outer catch handles general errors like network issues</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.error('[generateStoryboardPrompts] An unhandled error occurred:', error);</p>
<p class="p1"><span class="Apple-converted-space">                </span>alert(`${translations[currentLanguage].alertStoryboardUnhandledError}: ${error.message || "Unknown error."}`); // Improved error message</p>
<p class="p1"><span class="Apple-converted-space">                 </span>// Re-enable inputs on unhandled error</p>
<p class="p1"><span class="Apple-converted-space">                </span>imageCountInput.disabled = false;</p>
<p class="p1"><span class="Apple-converted-space">                </span>enhancePromptButton.disabled = false;</p>
<p class="p1"><span class="Apple-converted-space">            </span>} finally {</p>
<p class="p1"><span class="Apple-converted-space">                </span>isGeneratingStoryboard = false;</p>
<p class="p1"><span class="Apple-converted-space">                </span>updateUIState(false, false, false, false);</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.log("[generateStoryboardPrompts] Storyboard generation process finished. UI state updated.");</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/**</p>
<p class="p1"><span class="Apple-converted-space">         </span>* Generates images based on the user prompt/storyboard using the Imagen API.</p>
<p class="p1"><span class="Apple-converted-space">         </span>*/</p>
<p class="p1"><span class="Apple-converted-space">        </span>async function generateImages() {</p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log("[generateImages] Generate Images button clicked.");</p>
<p class="p1"><span class="Apple-converted-space">            </span>clearAndResetImages(); // Always clear previous content (uploaded or generated)</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>const imageWidth = parseInt(imageWidthSelect.value, 10);</p>
<p class="p1"><span class="Apple-converted-space">            </span>const imageHeight = parseInt(imageHeightSelect.value, 10);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>let promptsToUse = [];</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>if (storyboardPrompts.length &gt; 0) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>promptsToUse = storyboardPrompts;</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.log("[generateImages] Using storyboard prompts for image generation.");</p>
<p class="p1"><span class="Apple-converted-space">            </span>} else {</p>
<p class="p1"><span class="Apple-converted-space">                </span>const initialPrompt = promptInput.value.trim();</p>
<p class="p1"><span class="Apple-converted-space">                </span>const imageCount = parseInt(imageCountInput.value, 10);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>if (!initialPrompt) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>alert(translations[currentLanguage].alertPromptEmpty);</p>
<p class="p1"><span class="Apple-converted-space">                    </span>console.warn("[generateImages] Prompt is empty and no storyboard exists.");</p>
<p class="p1"><span class="Apple-converted-space">                    </span>return;</p>
<p class="p1"><span class="Apple-converted-space">                </span>}</p>
<p class="p1"><span class="Apple-converted-space">                </span>if (isNaN(imageCount) || imageCount &lt; 1 || imageCount &gt; 20) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>alert(translations[currentLanguage].alertImageCountInvalid);</p>
<p class="p1"><span class="Apple-converted-space">                    </span>console.warn("[generateImages] Invalid image count:", imageCount);</p>
<p class="p1"><span class="Apple-converted-space">                    </span>return;</p>
<p class="p1"><span class="Apple-converted-space">                </span>}</p>
<p class="p1"><span class="Apple-converted-space">                </span>for(let i=0; i&lt;imageCount; i++) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>promptsToUse.push(`${initialPrompt} - frame ${i + 1} of ${imageCount}`);</p>
<p class="p1"><span class="Apple-converted-space">                </span>}</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.log("[generateImages] Using single prompt input for image generation.");</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p2"><br></p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>if (isNaN(imageWidth) || isNaN(imageHeight) || imageWidth &lt; 1 || imageHeight &lt; 1) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>alert(translations[currentLanguage].alertImageDimensionsInvalid);</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.warn("[generateImages] Invalid image dimensions:", imageWidth, imageHeight);</p>
<p class="p1"><span class="Apple-converted-space">                </span>return;</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log("[generateImages] Preparing to generate images. Prompts count:", promptsToUse.length, "width:", imageWidth, "height:", imageHeight);</p>
<p class="p1"><span class="Apple-converted-space">            </span>updateUIState(true, false, false, false);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>try {</p>
<p class="p1"><span class="Apple-converted-space">                </span>for (let i = 0; i &lt; promptsToUse.length; i++) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>const currentGenPrompt = promptsToUse[i];</p>
<p class="p1"><span class="Apple-converted-space">                    </span>const payload = {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>instances: { prompt: currentGenPrompt },</p>
<p class="p1"><span class="Apple-converted-space">                        </span>parameters: {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>"sampleCount": 1,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>"width": imageWidth,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>"height": imageHeight</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>};</p>
<p class="p1"><span class="Apple-converted-space">                    </span>const apiKey = ""; // API key is provided by the Canvas environment at runtime</p>
<p class="p1"><span class="Apple-converted-space">                    </span>const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${apiKey}`;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                    </span>console.log(`[generateImages] Initiating fetch for image ${i + 1}/${promptsToUse.length} with prompt: "${currentGenPrompt}"`);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                    </span>const response = await fetch(apiUrl, {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>method: 'POST',</p>
<p class="p1"><span class="Apple-converted-space">                        </span>headers: { 'Content-Type': 'application/json' },</p>
<p class="p1"><span class="Apple-converted-space">                        </span>body: JSON.stringify(payload)</p>
<p class="p1"><span class="Apple-converted-space">                    </span>});</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                    </span>console.log(`[generateImages] Response status for image ${i + 1}: ${response.status} ${response.statusText}`);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                    </span>if (!response.ok) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>const errorData = await response.json();</p>
<p class="p1"><span class="Apple-converted-space">                        </span>console.error(`[generateImages] HTTP error for image ${i + 1}:`, errorData);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>alert(`${translations[currentLanguage].alertImageGenHTTPError} ${errorData.error ? errorData.error.message : response.statusText}.`);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>break;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                    </span>const result = await response.json();</p>
<p class="p1"><span class="Apple-converted-space">                    </span>console.log(`[generateImages] Raw result for image ${i + 1}:`, result);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                    </span>if (result.predictions &amp;&amp; result.predictions.length &gt; 0 &amp;&amp; result.predictions[0].bytesBase64Encoded) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>const imageUrl = `data:image/png;base64,${result.predictions[0].bytesBase64Encoded}`;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>generatedImages.push(imageUrl);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>console.log(`[generateImages] Image ${i + 1} generated successfully. Total generated: ${generatedImages.length}`);</p>
<p class="p1"><span class="Apple-converted-space">                    </span>} else {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>console.error('[generateImages] Failed to generate image (no prediction data):', result);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>alert(translations[currentLanguage].alertImageGenNoPrediction);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>break;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>if (generatedImages.length &gt; 0) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>imageDisplay.src = generatedImages[0];</p>
<p class="p1"><span class="Apple-converted-space">                    </span>imageDisplay.style.display = 'block';</p>
<p class="p1"><span class="Apple-converted-space">                    </span>console.log(`[generateImages] Successfully generated ${generatedImages.length} images. Displaying first image.`);</p>
<p class="p1"><span class="Apple-converted-space">                </span>} else {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>translations[currentLanguage].alertNoImagesGenerated = translations[currentLanguage].alertNoImagesGenerated || "No images were generated. Please check your prompt and try again.";</p>
<p class="p1"><span class="Apple-converted-space">                    </span>alert(translations[currentLanguage].alertNoImagesGenerated);</p>
<p class="p1"><span class="Apple-converted-space">                    </span>console.log("[generateImages] No images were successfully generated.");</p>
<p class="p1"><span class="Apple-converted-space">                </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>} catch (error) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.error('[generateImages] An unhandled error occurred during image generation:', error);</p>
<p class="p1"><span class="Apple-converted-space">                </span>alert(`${translations[currentLanguage].alertImageGenUnhandledError}: ${error.message || "Unknown error."}`); // Improved error message</p>
<p class="p1"><span class="Apple-converted-space">            </span>} finally {</p>
<p class="p1"><span class="Apple-converted-space">                </span>updateUIState(false, false, false, false);</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.log("[generateImages] Generate Images process finished. UI state updated.");</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/**</p>
<p class="p1"><span class="Apple-converted-space">         </span>* Enhances the user's prompt using the Gemini LLM.</p>
<p class="p1"><span class="Apple-converted-space">         </span>*/</p>
<p class="p1"><span class="Apple-converted-space">        </span>async function enhancePrompt() {</p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log("[enhancePrompt] Enhance Prompt button clicked.");</p>
<p class="p1"><span class="Apple-converted-space">            </span>const currentPrompt = promptInput.value.trim();</p>
<p class="p1"><span class="Apple-converted-space">            </span>if (!currentPrompt) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>alert(translations[currentLanguage].alertEnhancePromptEmpty);</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.warn("[enhancePrompt] Prompt is empty for enhancement.");</p>
<p class="p1"><span class="Apple-converted-space">                </span>return;</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>if (storyboardPrompts.length &gt; 0 || isFromUpload) {</p>
<p class="p1"><span class="Apple-converted-space">                 </span>alert(translations[currentLanguage].alertEnhancePromptConflict);</p>
<p class="p1"><span class="Apple-converted-space">                 </span>console.warn("[enhancePrompt] Attempted to enhance prompt while storyboard is active or images are uploaded.");</p>
<p class="p1"><span class="Apple-converted-space">                 </span>return;</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log("[enhancePrompt] Enhancing prompt:", currentPrompt);</p>
<p class="p1"><span class="Apple-converted-space">            </span>updateUIState(false, true, false, false);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>try {</p>
<p class="p1"><span class="Apple-converted-space">                </span>let chatHistory = [];</p>
<p class="p1"><span class="Apple-converted-space">                </span>chatHistory.push({</p>
<p class="p1"><span class="Apple-converted-space">                    </span>role: "user",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>parts: [{</p>
<p class="p1"><span class="Apple-converted-space">                        </span>text: `Refine and expand the following image generation prompt to make it more detailed and visually rich. Suggest specific styles, elements, or atmospheres. Provide only the enhanced prompt as plain text, with no introductory or concluding remarks.\n\nOriginal prompt: "${currentPrompt}"`</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}]</p>
<p class="p1"><span class="Apple-converted-space">                </span>});</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>const payload = { contents: chatHistory };</p>
<p class="p1"><span class="Apple-converted-space">                </span>const apiKey = ""; // API key is provided by the Canvas environment at runtime</p>
<p class="p1"><span class="Apple-converted-space">                </span>const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>console.log("[enhancePrompt] Initiating fetch for prompt enhancement with payload:", payload);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>const response = await fetch(apiUrl, {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>method: 'POST',</p>
<p class="p1"><span class="Apple-converted-space">                    </span>headers: { 'Content-Type': 'application/json' },</p>
<p class="p1"><span class="Apple-converted-space">                    </span>body: JSON.stringify(payload)</p>
<p class="p1"><span class="Apple-converted-space">                </span>});</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>console.log(`[enhancePrompt] Response status for enhance prompt: ${response.status} ${response.statusText}`);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                 </span>if (!response.ok) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>const errorData = await response.json();</p>
<p class="p1"><span class="Apple-converted-space">                    </span>console.error('[enhancePrompt] HTTP error during prompt enhancement:', errorData);</p>
<p class="p1"><span class="Apple-converted-space">                    </span>alert(`${translations[currentLanguage].alertEnhancePromptHTTPError} ${errorData.error ? errorData.error.message : response.statusText}.`);</p>
<p class="p1"><span class="Apple-converted-space">                    </span>return;</p>
<p class="p1"><span class="Apple-converted-space">                </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>const result = await response.json();</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.log("[enhancePrompt] Raw result for enhance prompt:", result);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>if (result.candidates &amp;&amp; result.candidates.length &gt; 0 &amp;&amp;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>result.candidates[0].content &amp;&amp; result.candidates[0].content.parts &amp;&amp;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>result.candidates[0].content.parts.length &gt; 0) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>const enhancedText = result.candidates[0].content.parts[0].text;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>promptInput.value = enhancedText.trim();</p>
<p class="p1"><span class="Apple-converted-space">                    </span>console.log("[enhancePrompt] Prompt enhanced successfully. New prompt:", promptInput.value);</p>
<p class="p1"><span class="Apple-converted-space">                </span>} else {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>console.error('[enhancePrompt] Failed to get enhanced prompt from LLM (no content):', result);</p>
<p class="p1"><span class="Apple-converted-space">                    </span>alert(translations[currentLanguage].alertEnhancePromptLLMContentError);</p>
<p class="p1"><span class="Apple-converted-space">                </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>} catch (error) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.error('[enhancePrompt] An unhandled error occurred during prompt enhancement:', error);</p>
<p class="p1"><span class="Apple-converted-space">                </span>alert(`${translations[currentLanguage].alertEnhancePromptUnhandledError}: ${error.message || "Unknown error."}`); // Improved error message</p>
<p class="p1"><span class="Apple-converted-space">            </span>} finally {</p>
<p class="p1"><span class="Apple-converted-space">                </span>updateUIState(false, false, false, false);</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.log("[enhancePrompt] Enhance Prompt process finished. UI state updated.");</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/**</p>
<p class="p1"><span class="Apple-converted-space">         </span>* Renders the uploaded images in the gallery with reordering controls.</p>
<p class="p1"><span class="Apple-converted-space">         </span>*/</p>
<p class="p1"><span class="Apple-converted-space">        </span>function renderUploadedImageGallery() {</p>
<p class="p1"><span class="Apple-converted-space">            </span>uploadedImageGallery.innerHTML = ''; // Clear existing thumbnails</p>
<p class="p1"><span class="Apple-converted-space">            </span>if (generatedImages.length === 0) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadedImageGalleryContainer.style.display = 'none';</p>
<p class="p1"><span class="Apple-converted-space">                </span>return;</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>uploadedImageGalleryContainer.style.display = 'block';</p>
<p class="p1"><span class="Apple-converted-space">            </span>galleryStatus.textContent = translations[currentLanguage].galleryStatus.replace('{{count}}', generatedImages.length);</p>
<p class="p1"><span class="Apple-converted-space">            </span>galleryStatus.style.display = 'block';</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>generatedImages.forEach((imageUrl, index) =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">                </span>const galleryItem = document.createElement('div');</p>
<p class="p1"><span class="Apple-converted-space">                </span>galleryItem.className = 'gallery-item';</p>
<p class="p1"><span class="Apple-converted-space">                </span>galleryItem.dataset.index = index;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>const img = document.createElement('img');</p>
<p class="p1"><span class="Apple-converted-space">                </span>img.src = imageUrl;</p>
<p class="p1"><span class="Apple-converted-space">                </span>img.alt = `Uploaded Image ${index + 1}`;</p>
<p class="p1"><span class="Apple-converted-space">                </span>galleryItem.appendChild(img);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>const controlsDiv = document.createElement('div');</p>
<p class="p1"><span class="Apple-converted-space">                </span>controlsDiv.className = 'item-controls';</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>const moveUpButton = document.createElement('button');</p>
<p class="p1"><span class="Apple-converted-space">                </span>moveUpButton.textContent = translations[currentLanguage].moveUp;</p>
<p class="p1"><span class="Apple-converted-space">                </span>moveUpButton.onclick = () =&gt; moveImageInGallery(index, -1);</p>
<p class="p1"><span class="Apple-converted-space">                </span>moveUpButton.disabled = index === 0;</p>
<p class="p1"><span class="Apple-converted-space">                </span>controlsDiv.appendChild(moveUpButton);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>const moveDownButton = document.createElement('button');</p>
<p class="p1"><span class="Apple-converted-space">                </span>moveDownButton.textContent = translations[currentLanguage].moveDown;</p>
<p class="p1"><span class="Apple-converted-space">                </span>moveDownButton.onclick = () =&gt; moveImageInGallery(index, 1);</p>
<p class="p1"><span class="Apple-converted-space">                </span>moveDownButton.disabled = index === generatedImages.length - 1;</p>
<p class="p1"><span class="Apple-converted-space">                </span>controlsDiv.appendChild(moveDownButton);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>galleryItem.appendChild(controlsDiv);</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadedImageGallery.appendChild(galleryItem);</p>
<p class="p1"><span class="Apple-converted-space">            </span>});</p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log("[renderUploadedImageGallery] Gallery re-rendered with image thumbnails and controls.");</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/**</p>
<p class="p1"><span class="Apple-converted-space">         </span>* Moves an image within the generatedImages array and re-renders the gallery.</p>
<p class="p1"><span class="Apple-converted-space">         </span>* @param {number} oldIndex The current index of the image.</p>
<p class="p1"><span class="Apple-converted-space">         </span>* @param {number} direction -1 to move up, 1 to move down.</p>
<p class="p1"><span class="Apple-converted-space">         </span>*/</p>
<p class="p1"><span class="Apple-converted-space">        </span>function moveImageInGallery(oldIndex, direction) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>const newIndex = oldIndex + direction;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>if (newIndex &gt;= 0 &amp;&amp; newIndex &lt; generatedImages.length) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>const [movedImage] = generatedImages.splice(oldIndex, 1);</p>
<p class="p1"><span class="Apple-converted-space">                </span>generatedImages.splice(newIndex, 0, movedImage);</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.log(`[moveImageInGallery] Moved image from ${oldIndex} to ${newIndex}.`);</p>
<p class="p1"><span class="Apple-converted-space">                </span>renderUploadedImageGallery();</p>
<p class="p1"><span class="Apple-converted-space">                </span>// Update main display if it was showing the moved image or the first image</p>
<p class="p1"><span class="Apple-converted-space">                </span>if (!slideshowInterval || oldIndex === currentImageIndex || newIndex === currentImageIndex) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>imageDisplay.src = generatedImages[currentImageIndex]; // Keep current image in sync with new order</p>
<p class="p1"><span class="Apple-converted-space">                </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/**</p>
<p class="p1"><span class="Apple-converted-space">         </span>* Handles the upload of user images.</p>
<p class="p1"><span class="Apple-converted-space">         </span>* @param {Event} event The change event from the file input.</p>
<p class="p1"><span class="Apple-converted-space">         </span>*/</p>
<p class="p1"><span class="Apple-converted-space">        </span>async function uploadImages(event) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log("[uploadImages] Upload input change event triggered.");</p>
<p class="p1"><span class="Apple-converted-space">            </span>clearAndResetImages(); // Ensure clean slate (clears storyboard as well)</p>
<p class="p1"><span class="Apple-converted-space">            </span>isFromUpload = true; // Set flag at the beginning of upload process</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>const files = event.target.files;</p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log(`[uploadImages] Number of files selected: ${files.length}`);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>if (files.length === 0) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.log("[uploadImages] No files selected for upload.");</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadStatus.textContent = '';</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadStatus.style.display = 'none';</p>
<p class="p1"><span class="Apple-converted-space">                </span>isFromUpload = false;</p>
<p class="p1"><span class="Apple-converted-space">                </span>updateUIState(false, false, false, false);</p>
<p class="p1"><span class="Apple-converted-space">                </span>return;</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log(`[uploadImages] Attempting to upload ${files.length} images.`);</p>
<p class="p1"><span class="Apple-converted-space">            </span>uploadStatus.textContent = translations[currentLanguage].uploadProcessing.replace('{{count}}', files.length);</p>
<p class="p1"><span class="Apple-converted-space">            </span>uploadStatus.style.display = 'block';</p>
<p class="p1"><span class="Apple-converted-space">            </span>updateUIState(false, false, false, true);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>let loadedCount = 0;</p>
<p class="p1"><span class="Apple-converted-space">            </span>const promises = [];</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>for (let i = 0; i &lt; files.length; i++) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>const file = files[i];</p>
<p class="p1"><span class="Apple-converted-space">                </span>if (!file.type.startsWith('image/')) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>console.warn(`[uploadImages] Skipping non-image file: ${file.name}`);</p>
<p class="p1"><span class="Apple-converted-space">                    </span>continue;</p>
<p class="p1"><span class="Apple-converted-space">                </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>const reader = new FileReader();</p>
<p class="p1"><span class="Apple-converted-space">                </span>promises.push(new Promise((resolve, reject) =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>reader.onload = (e) =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>console.log(`[uploadImages] File ${file.name} loaded successfully as Data URL.`);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>generatedImages.push(e.target.result);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>loadedCount++;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>uploadStatus.textContent = translations[currentLanguage].uploadProcessing.replace('{{count}}', loadedCount);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>resolve();</p>
<p class="p1"><span class="Apple-converted-space">                    </span>};</p>
<p class="p1"><span class="Apple-converted-space">                    </span>reader.onerror = (error) =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>console.error('[uploadImages] Error reading file:', file.name, error);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>alert(`${translations[currentLanguage].alertUploadFileReadError} ${file.name}.`);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>reject(error);</p>
<p class="p1"><span class="Apple-converted-space">                    </span>};</p>
<p class="p1"><span class="Apple-converted-space">                    </span>reader.readAsDataURL(file);</p>
<p class="p1"><span class="Apple-converted-space">                </span>}));</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>try {</p>
<p class="p1"><span class="Apple-converted-space">                </span>await Promise.all(promises);</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.log("[uploadImages] All uploaded image promises resolved. Total images collected:", generatedImages.length);</p>
<p class="p1"><span class="Apple-converted-space">                </span>if (generatedImages.length &gt; 0) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>imageDisplay.src = generatedImages[0];</p>
<p class="p1"><span class="Apple-converted-space">                    </span>imageDisplay.style.display = 'block';</p>
<p class="p1"><span class="Apple-converted-space">                    </span>originalImagePreview.src = generatedImages[0];</p>
<p class="p1"><span class="Apple-converted-space">                    </span>originalImagePreviewContainer.style.display = 'block';</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                    </span>renderUploadedImageGallery(); // Render the gallery with uploaded images</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                    </span>uploadStatus.textContent = translations[currentLanguage].uploadedReady.replace('{{count}}', generatedImages.length);</p>
<p class="p1"><span class="Apple-converted-space">                    </span>uploadStatus.style.display = 'block';</p>
<p class="p1"><span class="Apple-converted-space">                    </span>console.log(`[uploadImages] Successfully uploaded ${generatedImages.length} images. isFromUpload set to true.`);</p>
<p class="p1"><span class="Apple-converted-space">                </span>} else {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>uploadStatus.textContent = translations[currentLanguage].alertNoValidImagesUploaded;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>uploadStatus.style.display = 'block';</p>
<p class="p1"><span class="Apple-converted-space">                    </span>console.log("[uploadImages] No valid images were uploaded.");</p>
<p class="p1"><span class="Apple-converted-space">                    </span>isFromUpload = false;</p>
<p class="p1"><span class="Apple-converted-space">                </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>} catch (error) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.error('[uploadImages] Error during image upload process:', error);</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadStatus.textContent = translations[currentLanguage].alertUploadUnhandledError;</p>
<p class="p1"><span class="Apple-converted-space">                </span>uploadStatus.style.display = 'block';</p>
<p class="p1"><span class="Apple-converted-space">                </span>isFromUpload = false;</p>
<p class="p1"><span class="Apple-converted-space">            </span>} finally {</p>
<p class="p1"><span class="Apple-converted-space">                </span>updateUIState(false, false, false, false);</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.log("[uploadImages] Upload Images process finished. UI state updated.");</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/**</p>
<p class="p1"><span class="Apple-converted-space">         </span>* Displays the next image in the slideshow.</p>
<p class="p1"><span class="Apple-converted-space">         </span>*/</p>
<p class="p1"><span class="Apple-converted-space">        </span>function showNextImage() {</p>
<p class="p1"><span class="Apple-converted-space">            </span>if (generatedImages.length === 0) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.warn("[showNextImage] called but no images in queue. Stopping slideshow.");</p>
<p class="p1"><span class="Apple-converted-space">                </span>stopSlideshow();</p>
<p class="p1"><span class="Apple-converted-space">                </span>return;</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log(`[showNextImage] Displaying image ${currentImageIndex + 1} of ${generatedImages.length}`);</p>
<p class="p1"><span class="Apple-converted-space">            </span>imageDisplay.src = generatedImages[currentImageIndex];</p>
<p class="p1"><span class="Apple-converted-space">            </span>imageDisplay.style.display = 'block';</p>
<p class="p1"><span class="Apple-converted-space">            </span>currentImageIndex = (currentImageIndex + 1) % generatedImages.length;</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/**</p>
<p class="p1"><span class="Apple-converted-space">         </span>* Starts the slideshow.</p>
<p class="p1"><span class="Apple-converted-space">         </span>*/</p>
<p class="p1"><span class="Apple-converted-space">        </span>function startSlideshow() {</p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log("[startSlideshow] Start Slideshow button clicked.");</p>
<p class="p1"><span class="Apple-converted-space">            </span>if (generatedImages.length === 0) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>alert(translations[currentLanguage].slideshowStartAlert);</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.warn("[startSlideshow] Attempted to start slideshow with no images.");</p>
<p class="p1"><span class="Apple-converted-space">                </span>return;</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>const interval = parseInt(intervalInput.value, 10);</p>
<p class="p1"><span class="Apple-converted-space">            </span>if (isNaN(interval) || interval &lt; 100) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>alert(translations[currentLanguage].slideshowInvalidInterval);</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.warn("[startSlideshow] Invalid interval input:", interval);</p>
<p class="p1"><span class="Apple-converted-space">                </span>return;</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>stopSlideshow();</p>
<p class="p1"><span class="Apple-converted-space">            </span>updateUIState(false, false, true, false);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>currentImageIndex = 0;</p>
<p class="p1"><span class="Apple-converted-space">            </span>showNextImage();</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>slideshowInterval = setInterval(showNextImage, interval);</p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log(`[startSlideshow] Slideshow started with interval: ${interval}ms.`);</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/**</p>
<p class="p1"><span class="Apple-converted-space">         </span>* Stops the slideshow.</p>
<p class="p1"><span class="Apple-converted-space">         </span>*/</p>
<p class="p1"><span class="Apple-converted-space">        </span>function stopSlideshow() {</p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log("[stopSlideshow] Stop Slideshow button clicked.");</p>
<p class="p1"><span class="Apple-converted-space">            </span>if (slideshowInterval) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>clearInterval(slideshowInterval);</p>
<p class="p1"><span class="Apple-converted-space">                </span>slideshowInterval = null;</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.log("[stopSlideshow] Slideshow stopped.");</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>updateUIState(false, false, false, false);</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/**</p>
<p class="p1"><span class="Apple-converted-space">         </span>* Downloads all current images individually (whether generated or uploaded).</p>
<p class="p1"><span class="Apple-converted-space">         </span>*/</p>
<p class="p1"><span class="Apple-converted-space">        </span>function downloadAllImages() {</p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log("[downloadAllImages] Download All Images button clicked.");</p>
<p class="p1"><span class="Apple-converted-space">            </span>if (generatedImages.length === 0) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>alert(translations[currentLanguage].alertNoImagesToDownload);</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.warn("[downloadAllImages] Attempted to download with no images.");</p>
<p class="p1"><span class="Apple-converted-space">                </span>return;</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>generatedImages.forEach((imageUrl, index) =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">                </span>const link = document.createElement('a');</p>
<p class="p1"><span class="Apple-converted-space">                </span>link.href = imageUrl;</p>
<p class="p1"><span class="Apple-converted-space">                </span>link.download = `music_video_image_${index + 1}.png`;</p>
<p class="p1"><span class="Apple-converted-space">                </span>document.body.appendChild(link);</p>
<p class="p1"><span class="Apple-converted-space">                </span>link.click();</p>
<p class="p1"><span class="Apple-converted-space">                </span>document.body.removeChild(link);</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.log(`[downloadAllImages] Triggered download for music_video_image_${index + 1}.png`);</p>
<p class="p1"><span class="Apple-converted-space">            </span>});</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>/**</p>
<p class="p1"><span class="Apple-converted-space">         </span>* Downloads all current images as a single ZIP file (whether generated or uploaded).</p>
<p class="p1"><span class="Apple-converted-space">         </span>*/</p>
<p class="p1"><span class="Apple-converted-space">        </span>async function downloadImagesAsZip() {</p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log("[downloadImagesAsZip] Download Video Frames (ZIP) button clicked.");</p>
<p class="p1"><span class="Apple-converted-space">            </span>if (generatedImages.length === 0) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>alert(translations[currentLanguage].alertNoImagesToZip);</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.warn("[downloadImagesAsZip] Attempted to zip with no images.");</p>
<p class="p1"><span class="Apple-converted-space">                </span>return;</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>const zip = new JSZip();</p>
<p class="p1"><span class="Apple-converted-space">            </span>llmLoadingIndicator.textContent = translations[currentLanguage].loadingCreatingZip;</p>
<p class="p1"><span class="Apple-converted-space">            </span>updateUIState(false, true, false, false);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>try {</p>
<p class="p1"><span class="Apple-converted-space">                </span>for (let i = 0; i &lt; generatedImages.length; i++) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>const imageUrl = generatedImages[i];</p>
<p class="p1"><span class="Apple-converted-space">                    </span>if (imageUrl.startsWith('data:image/')) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>const base64Data = imageUrl.split(',')[1];</p>
<p class="p1"><span class="Apple-converted-space">                        </span>zip.file(`music_video_image_${i + 1}.png`, base64Data, { base64: true });</p>
<p class="p1"><span class="Apple-converted-space">                        </span>console.log(`[downloadImagesAsZip] Added image ${i + 1} to ZIP.`);</p>
<p class="p1"><span class="Apple-converted-space">                    </span>} else {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>console.warn(`[downloadImagesAsZip] Skipping non-data URL image for ZIP: ${imageUrl}. Ensure images are loaded as data URLs.`);</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>console.log("[downloadImagesAsZip] Generating ZIP file asynchronously...");</p>
<p class="p1"><span class="Apple-converted-space">                </span>const blob = await zip.generateAsync({ type: "blob" });</p>
<p class="p1"><span class="Apple-converted-space">                </span>const link = document.createElement('a');</p>
<p class="p1"><span class="Apple-converted-space">                </span>link.href = URL.createObjectURL(blob);</p>
<p class="p1"><span class="Apple-converted-space">                </span>link.download = 'music_video_frames.zip';</p>
<p class="p1"><span class="Apple-converted-space">                </span>document.body.appendChild(link);</p>
<p class="p1"><span class="Apple-converted-space">                </span>link.click();</p>
<p class="p1"><span class="Apple-converted-space">                </span>document.body.removeChild(link);</p>
<p class="p1"><span class="Apple-converted-space">                </span>URL.revokeObjectURL(link.href);</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.log("[downloadImagesAsZip] ZIP file download triggered.");</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>} catch (error) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.error('[downloadImagesAsZip] Error creating or downloading ZIP:', error);</p>
<p class="p1"><span class="Apple-converted-space">                </span>alert(translations[currentLanguage].alertZipError);</p>
<p class="p1"><span class="Apple-converted-space">            </span>} finally {</p>
<p class="p1"><span class="Apple-converted-space">                </span>llmLoadingIndicator.textContent = translations[currentLanguage].llmLoadingMessage;</p>
<p class="p1"><span class="Apple-converted-space">                </span>updateUIState(false, false, false, false);</p>
<p class="p1"><span class="Apple-converted-space">                </span>console.log("[downloadImagesAsZip] ZIP download process finished. UI state updated.");</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>// Event Listeners</p>
<p class="p1"><span class="Apple-converted-space">        </span>generateButton.addEventListener('click', generateImages);</p>
<p class="p1"><span class="Apple-converted-space">        </span>playButton.addEventListener('click', startSlideshow);</p>
<p class="p1"><span class="Apple-converted-space">        </span>stopButton.addEventListener('click', stopSlideshow);</p>
<p class="p1"><span class="Apple-converted-space">        </span>enhancePromptButton.addEventListener('click', enhancePrompt);</p>
<p class="p1"><span class="Apple-converted-space">        </span>downloadImagesButton.addEventListener('click', downloadAllImages);</p>
<p class="p1"><span class="Apple-converted-space">        </span>downloadZipButton.addEventListener('click', downloadImagesAsZip);</p>
<p class="p1"><span class="Apple-converted-space">        </span>generateStoryboardButton.addEventListener('click', generateStoryboardPrompts);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>// Tab button event listeners</p>
<p class="p1"><span class="Apple-converted-space">        </span>tabButtons.forEach(button =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">            </span>button.addEventListener('click', () =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">                </span>showTab(button.dataset.tab);</p>
<p class="p1"><span class="Apple-converted-space">            </span>});</p>
<p class="p1"><span class="Apple-converted-space">        </span>});</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>// Language selector event listener</p>
<p class="p1"><span class="Apple-converted-space">        </span>languageSelect.addEventListener('change', (event) =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">            </span>currentLanguage = event.target.value;</p>
<p class="p1"><span class="Apple-converted-space">            </span>localStorage.setItem('selectedLanguage', currentLanguage); // Save selected language</p>
<p class="p1"><span class="Apple-converted-space">            </span>applyTranslations();</p>
<p class="p1"><span class="Apple-converted-space">            </span>// Re-render gallery to update button texts</p>
<p class="p1"><span class="Apple-converted-space">            </span>if (isFromUpload &amp;&amp; uploadedImageGallery.children.length &gt; 0) {</p>
<p class="p1"><span class="Apple-converted-space">                 </span>renderUploadedImageGallery();</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>});</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>// Theme selector event listener</p>
<p class="p1"><span class="Apple-converted-space">        </span>themeSelect.addEventListener('change', (event) =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">            </span>applyTheme(event.target.value);</p>
<p class="p1"><span class="Apple-converted-space">        </span>});</p>
<p class="p2"><br></p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>// Explicitly trigger the hidden file input when the container div is clicked</p>
<p class="p1"><span class="Apple-converted-space">        </span>uploadInputContainerDiv.addEventListener('click', () =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">            </span>console.log("[Event Listener] Upload container div clicked, programmatically clicking hidden file input.");</p>
<p class="p1"><span class="Apple-converted-space">            </span>uploadInput.click();</p>
<p class="p1"><span class="Apple-converted-space">        </span>});</p>
<p class="p1"><span class="Apple-converted-space">        </span>uploadInput.addEventListener('change', uploadImages);</p>
<p class="p2"><br></p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>// Initial state on load</p>
<p class="p1"><span class="Apple-converted-space">        </span>// Set initial language from localStorage or default to 'en'</p>
<p class="p1"><span class="Apple-converted-space">        </span>const savedLanguage = localStorage.getItem('selectedLanguage');</p>
<p class="p1"><span class="Apple-converted-space">        </span>if (savedLanguage &amp;&amp; translations[savedLanguage]) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>currentLanguage = savedLanguage;</p>
<p class="p1"><span class="Apple-converted-space">            </span>languageSelect.value = savedLanguage;</p>
<ul class="ul1">
  <li class="li1"><span class="Apple-converted-space">        </span>} else {</li>
</ul>
<p class="p1"><span class="Apple-converted-space">            </span>localStorage.setItem('selectedLanguage', 'en'); // Default to English</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>// Set initial theme from localStorage or default to 'system'</p>
<p class="p1"><span class="Apple-converted-space">        </span>const savedTheme = localStorage.getItem('selectedTheme');</p>
<p class="p1"><span class="Apple-converted-space">        </span>if (savedTheme) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>themeSelect.value = savedTheme;</p>
<p class="p1"><span class="Apple-converted-space">            </span>applyTheme(savedTheme);</p>
<p class="p1"><span class="Apple-converted-space">        </span>} else {</p>
<p class="p1"><span class="Apple-converted-space">            </span>themeSelect.value = 'system'; // Default to system theme</p>
<p class="p1"><span class="Apple-converted-space">            </span>applyTheme('system');</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>showTab('ai-create'); // Show the 'Create with AI' tab by default</p>
<p class="p1"><span class="Apple-converted-space">        </span>applyTranslations(); // Apply initial translations for all elements</p>
<p class="p1"><span class="Apple-converted-space">        </span>updateUIState(false, false, false, false);</p>
<p class="p1"><span class="Apple-converted-space">        </span>console.log("Initial UI state set. Application ready.");</p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;/script&gt;</p>
<p class="p1">&lt;/body&gt;</p>
<p class="p1">&lt;/html&gt;</p>
</body>
</html>
